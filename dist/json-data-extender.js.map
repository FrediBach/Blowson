{"version":3,"file":"json-data-extender.js","sources":["../src/helpers.js","../src/extend.js"],"sourcesContent":["import Chance from 'chance';\nimport slugify from 'slugify';\nimport md5 from 'md5';\n\nconst chance = new Chance();\n\nexport function randomTime() {\n    let hours = String(chance.hour({ twentyfour: true })),\n        minutes = String(chance.minute()),\n        seconds = String(chance.second());\n\n    if (hours.length === 1) '0' + hours;\n    if (minutes.length === 1) '0' + minutes;\n    if (seconds.length === 1) '0' + seconds;\n\n    return [hours, minutes, seconds].join(':');\n}\n\nexport function randomDate(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nexport function randomDatetime(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear(),\n        hours = d.getHours(),\n        minutes = d.getMinutes(),\n        seconds = d.getSeconds();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-') + 'T' + [hours, minutes, seconds].join(':') + '+01:00';\n}\n\nexport function findGap(numArray) {\n    let min = Math.min.apply(Math, numArray),\n        max = Math.max.apply(Math, numArray),\n        missingNums = [],\n        i;\n\n    for (i = min; i <= max; i++) {\n        if (numArray.indexOf(i) == -1) {\n            missingNums.push(i);\n        }\n    }\n\n    if (missingNums.length > 0) {\n        return {\n            start: Math.min.apply(Math, missingNums),\n            end: Math.max.apply(Math, missingNums)\n        };\n    } else {\n        return false;\n    }\n}\n\nexport function floatPrecision(a) {\n    if (!isFinite(a)) return 0;\n\n    var e = 1, p = 0;\n\n    while (Math.round(a * e) / e !== a) {\n        e *= 10; p++;\n    }\n\n    return p;\n}\n\nexport function getMaxPrecision(floatArray) {\n    let maxPrecision = 0,\n        value;\n\n    for (value of floatArray) {\n        let precision = floatPrecision(value);\n\n        if (precision > maxPrecision) {\n            maxPrecision = precision;\n        }\n    }\n\n    return maxPrecision;\n}\n\nexport function everythingCapitalized(stringArray) {\n    let isCapitalized = true,\n        str;\n\n    for (str of stringArray) {\n        if (capitalize(str) !== str) {\n            isCapitalized = false;\n            break;\n        }\n    }\n\n    return isCapitalized;\n}\n\nexport function minNumber(intArray) {\n    return Math.min.apply(Math, intArray);\n}\n\nexport function maxNumber(intArray) {\n    return Math.max.apply(Math, intArray);\n}\n\nexport function minGapOfIntArray(intArray) {\n    let minGap = 999999999,\n        value1,\n        value2;\n\n    for (value1 of intArray) {\n        for (value2 of intArray) {\n            if (value1 !== value2 && Math.abs(value1 - value2) < minGap) {\n                minGap = Math.abs(value1 - value2);\n            }\n        }\n    }\n\n    return minGap;\n}\n\nexport function randomIntWithStep(min, max, step) {\n    let delta,\n        range,\n        rand;\n\n    if (arguments.length < 2) {\n        max = min;\n        min = 0;\n    }\n\n    if (!step) {\n        step = 1;\n    }\n\n    delta = max - min;\n    range = delta / step;\n    rand = Math.random();\n    rand *= range;\n    rand = Math.floor(rand);\n    rand *= step;\n    rand += min;\n\n    return rand;\n}\n\nexport function minStrLength(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function maxStrLength(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function minWordCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function maxWordCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function minSentenceCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function maxSentenceCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function minParagraphCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function maxParagraphCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function minDate(dateArray) {\n    return new Date(Math.min.apply(null, dateArray));\n}\n\nexport function maxDate(dateArray) {\n    return new Date(Math.max.apply(null, dateArray));\n}\n\nexport function convertStringDateArray(stringDateArray) {\n    let newArray = [],\n        dateString;\n\n    for (dateString of stringDateArray) {\n        newArray.push(new Date(dateString));\n    }\n\n    return newArray;\n}\n\nexport function capitalize(str) {\n    return str.replace(/(?:^|\\s)\\S/g, function (a) { return a.toUpperCase(); });\n};\n\nexport function isDateString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(str);\n}\n\nexport function isDatetimeString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function isTimeString(str) {\n    return /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function getWeights(allEntries, uniqueEntries) {\n    let weightedEntries = {},\n        weights = [],\n        entry;\n    \n    for (entry of allEntries) {\n        if (typeof weightedEntries[entry] === 'undefined') {\n            weightedEntries[entry] = 1;\n        } else {\n            weightedEntries[entry]++;\n        }\n    }\n\n    for (entry of uniqueEntries) {\n        weights.push(weightedEntries[entry]);\n    }\n\n    return weights;\n}\n\nexport function getNumberDirection(entries) {\n    let direction = null,\n        lastValue = null,\n        noDirection = false,\n        value;\n\n    for (value of entries) {\n        if (lastValue !== null && value > lastValue) {\n            if (direction === 'desc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'asc';\n        }\n        if (lastValue !== null && value < lastValue) {\n            if (direction === 'asc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'desc';\n        }\n        lastValue = value;\n    }\n\n    if (noDirection || direction === null) {\n        return false;\n    } else {\n        return direction;\n    }\n}\n\nexport function filterValue(value, filter) {\n    value = String(value);\n\n    if (filter === 'slug') {\n        return slugify(value, { lower: true });\n    } else if (filter === 'lower') {\n        return value.toLowerCase();\n    } else if (filter === 'uppper') {\n        return value.toLowerCase();\n    } else if (filter === 'md5') {\n        return md5(value);\n    } else {\n        return value;\n    }\n}","import _ from 'lodash';\nimport txtgen from 'txtgen';\nimport Chance from 'chance';\nimport faker from 'faker';\n\nimport {\n    randomTime,\n    randomDate,\n    randomDatetime,\n    findGap,\n    getMaxPrecision,\n    everythingCapitalized,\n    minNumber,\n    maxNumber,\n    minGapOfIntArray,\n    randomIntWithStep,\n    minStrLength,\n    maxStrLength,\n    minWordCount,\n    maxWordCount,\n    minSentenceCount,\n    maxSentenceCount,\n    minParagraphCount,\n    maxParagraphCount,\n    minDate,\n    maxDate,\n    convertStringDateArray,\n    capitalize,\n    isDateString,\n    isDatetimeString,\n    isTimeString,\n    getWeights,\n    getNumberDirection,\n    filterValue\n} from './helpers';\n\nconst chance = new Chance();\n\ntxtgen.addTemplates([\n    'congratulations to the {{noun}} that won the {{adjective}} {{noun}} with {{a_noun}}',\n    'incomprehensibilities of a {{adjective}} {{noun}} and {{a_noun}} made {{a_noun}} {{adjective}}'\n]);\n\nmodule.exports = function extendData(data) {\n    let types = [],\n        type,\n        row,\n        field;\n\n    for (type in data) {\n        let typeDef = {\n                key: type,\n                minID: 1,\n                maxID: 1,\n                totalCount: 0,\n                fields: {}\n            },\n            entry,\n            field;\n\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                let fieldValue = data[type][entry][field],\n                    fieldType = 'undefined';\n\n                if (typeof fieldValue === 'boolean') {\n                    fieldType = 'boolean';\n                } else if (typeof fieldValue === 'number') {\n                    if (Math.round(fieldValue) === fieldValue) {\n                        fieldType = 'int';\n                    } else {\n                        fieldType = 'float';\n                    }\n                } else if (typeof fieldValue === 'string') {\n                    if (isDateString(fieldValue)) {\n                        fieldType = 'date';\n                    } else if (isDatetimeString(fieldValue)) {\n                        fieldType = 'datetime';\n                    } else if (isTimeString(fieldValue)) {\n                        fieldType = 'time';\n                    } else if (fieldValue.length === 1) {\n                        fieldType = 'char';\n                    } else {\n                        fieldType = 'string';\n                    }\n                } else if (typeof fieldValue === 'object') {\n                    fieldType = 'JSON';\n                }\n\n                if (typeof typeDef.fields[field] === 'undefined') {\n                    typeDef.fields[field] = {\n                        types: [fieldType],\n                        entries: [fieldValue],\n                        allEntries: [fieldValue],\n                        cnt: 1\n                    };\n                } else {\n                    typeDef.fields[field].types.push(fieldType);\n                    typeDef.fields[field].types = _.uniq(typeDef.fields[field].types);\n                    typeDef.fields[field].entries.push(fieldValue);\n                    typeDef.fields[field].entries = _.uniq(typeDef.fields[field].entries);\n                    typeDef.fields[field].allEntries.push(fieldValue);\n                    typeDef.fields[field].cnt++;\n                }\n            }\n        }\n\n        for (field in typeDef.fields) {\n            if (field === 'id') {\n                typeDef.totalCount = typeDef.fields[field].cnt;\n            }\n            if (typeDef.fields[field].types.length === 1) {\n                typeDef.fields[field].type = typeDef.fields[field].types[0];\n            }\n            if (typeDef.fields[field].entries.length < typeDef.fields[field].cnt) {\n                typeDef.fields[field].repeatEntries = true;\n                typeDef.fields[field].weights = getWeights(typeDef.fields[field].allEntries, typeDef.fields[field].entries);\n            } else {\n                typeDef.fields[field].repeatEntries = false;\n            }\n            if (typeDef.fields[field].cnt < typeDef.totalCount) {\n                typeDef.fields[field].required = false;\n            } else {\n                typeDef.fields[field].required = true;\n            }\n        }\n\n        typeDef.gap = findGap(typeDef.fields['id'].entries);\n\n        types.push(typeDef);\n    }\n\n    for (type in types) {\n        let settings = types[type];\n\n        if (settings.gap) {\n            let id,\n                field;\n\n            for (id = settings.gap.start; id <= settings.gap.end; id++) {\n                let row = {};\n\n                for (field in settings.fields) {\n                    let value = '';\n\n                    if (settings.fields[field].repeatEntries) {\n                        value = chance.weighted(settings.fields[field].entries, settings.fields[field].weights);\n                    } else {\n\n                        if (field === 'id') value = id;\n                        if (field === 'age' && settings.fields[field].type === 'int') value = chance.age();\n                        if (field === 'firstname' && settings.fields[field].type === 'string') value = chance.first();\n                        if (field === 'lastname' && settings.fields[field].type === 'string') value = chance.last();\n                        if (field === 'company' && settings.fields[field].type === 'string') value = chance.company();\n                        if (field === 'country' && settings.fields[field].type === 'string') value = chance.country();\n                        if (field === 'email' && settings.fields[field].type === 'string') value = faker.internet.exampleEmail();\n                        if (field === 'color' && settings.fields[field].type === 'string') value = chance.color();\n                        if (field === 'ip' && settings.fields[field].type === 'string') value = chance.ip();\n                        if (field === 'profession' && settings.fields[field].type === 'string') value = chance.profession();\n                        if (field === 'url' && settings.fields[field].type === 'string') value = chance.url();\n                        if (field === 'city' && settings.fields[field].type === 'string') value = chance.city();\n                        if (field === 'street' && settings.fields[field].type === 'string') value = chance.street();\n                        if (field === 'zip' && settings.fields[field].type === 'int') value = parseInt(chance.zip());\n                        if (field === 'weekday' && settings.fields[field].type === 'string') value = chance.weekday();\n                        if (field === 'year' && settings.fields[field].type === 'int') value = parseInt(chance.year());\n                        if (field === 'password' && settings.fields[field].type === 'string') value = chance.hash();\n                        if (field === 'guid' && settings.fields[field].type === 'string') value = chance.guid();\n                        if (field === 'product' && settings.fields[field].type === 'string') value = faker.commerce.productName();\n                        if (field === 'material' && settings.fields[field].type === 'string') value = faker.commerce.productMaterial();\n                        if (field === 'iban' && settings.fields[field].type === 'string') value = faker.finance.iban();\n                        if (field === 'bic' && settings.fields[field].type === 'string') value = faker.finance.bic();\n                        if (field === 'avatar' && settings.fields[field].type === 'string') value = faker.image.avatar();\n                        if (field === 'username' && settings.fields[field].type === 'string') value = faker.internet.userName();\n                        if (field === 'homepage' && settings.fields[field].type === 'string') value = faker.internet.url();\n                        if (field === 'job' && settings.fields[field].type === 'string') value = faker.name.jobTitle();\n                        if (field === 'mimetype' && settings.fields[field].type === 'string') value = faker.system.mimeType();\n\n                        if (value === '' && settings.fields[field].type === 'JSON') {\n                            value = {};\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'string') {\n                            let minLength = minStrLength(settings.fields[field].entries),\n                                maxLength = maxStrLength(settings.fields[field].entries),\n                                minWords = minWordCount(settings.fields[field].entries),\n                                maxWords = maxWordCount(settings.fields[field].entries),\n                                minSentences = minSentenceCount(settings.fields[field].entries),\n                                maxSentences = maxSentenceCount(settings.fields[field].entries),\n                                minParagraphs = minParagraphCount(settings.fields[field].entries),\n                                maxParagraphs = maxParagraphCount(settings.fields[field].entries);\n\n                            if (maxParagraphs > 1) {\n                                value = txtgen.article(Math.floor(Math.random() * maxParagraphs) + minParagraphs);\n                            } else if (maxSentences > 1) {\n                                value = txtgen.paragraph(Math.floor(Math.random() * maxSentences) + minSentences);\n                            } else if (maxWords > 1) {\n                                value = chance.sentence({ words: Math.floor(Math.random() * maxWords) + minWords }).slice(0, -1);\n                            } else {\n                                if (settings.fields[field].entries[0][0].toUpperCase() === settings.fields[field].entries[0][0]) {\n                                    value = chance.capitalize(chance.word({ length: Math.floor(Math.random() * minLength) + maxLength }));\n                                } else {\n                                    value = chance.string({ length: Math.floor(Math.random() * minLength) + maxLength });\n                                }\n                            }\n\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = value.toUpperCase();\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = value.toLowerCase();\n                            } else if (everythingCapitalized(settings.fields[field].entries)) {\n                                value = capitalize(value);\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'int') {\n                            let minInt = minNumber(settings.fields[field].entries),\n                                maxInt = maxNumber(settings.fields[field].entries),\n                                minGap = minGapOfIntArray(settings.fields[field].entries);\n\n                            value = randomIntWithStep(minInt, maxInt, minGap);\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'float') {\n                            let minFloat = minNumber(settings.fields[field].entries),\n                                maxFloat = maxNumber(settings.fields[field].entries),\n                                maxPrecision = getMaxPrecision(settings.fields[field].entries);\n\n                            value = Number((Math.random() * maxFloat + minFloat).toFixed(maxPrecision));\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'char') {\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = chance.letter({ casing: 'upper' });\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = chance.letter({ casing: 'lower' });\n                            } else {\n                                value = chance.letter();\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'date') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                            value = randomDate(minDateDate, maxDateDate);\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'datetime') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                            value = randomDatetime(minDateDate, maxDateDate);\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'time') {\n                            value = randomTime();\n                        }\n\n                    }\n\n                    if (settings.fields[field].required || Math.random() >= 0.5) {\n                        row[field] = value;\n                    }\n                }\n\n                data[settings.key].push(row);\n            }\n\n        }\n\n    }\n\n    // Replace template variables:\n    for (type in data) {\n        for (row in data[type]) {\n            for (field in data[type][row]) {\n                let value = data[type][row][field];\n\n                if (typeof value === 'string') {\n                    data[type][row][field] = value.replace(/{{\\s*([\\w\\.\\?\\|]+)\\s*}}/g, function (match, capture) {\n                        let defaultParts = capture.split('?'),\n                            filterParts = defaultParts[0].split('|'),\n                            parts = filterParts[0].split('.');\n\n                        if (parts[0] === 'field' && parts.length === 2 && typeof data[type][row][parts[1]] !== 'undefined') {\n                            if (filterParts.length > 1) {\n                                return filterValue(data[type][row][parts[1]], filterParts[1]);\n                            } else {\n                                return data[type][row][parts[1]];\n                            }\n                        } else if (parts[0] === 'field' && parts.length === 3 && typeof data[type][row][parts[1] + '_id'] !== 'undefined' && typeof data[parts[1] + 's'] !== 'undefined') {\n                            let id = data[type][row][parts[1] + '_id'],\n                                refType = parts[1] + 's',\n                                refRow,\n                                refField,\n                                found = false;\n\n                            for (refRow in data[refType]) {\n                                for (refField in data[refType][refRow]) {\n                                    if (found && refField === parts[2]) {\n                                        if (filterParts.length > 1) {\n                                            return filterValue(data[refType][refRow][refField], filterParts[1]);\n                                        } else {\n                                            return data[refType][refRow][refField];\n                                        }\n                                    }\n\n                                    if (refField === 'id' && data[refType][refRow][refField] === id) {\n                                        found = true;\n                                    }\n                                }\n                            }\n\n                            if (defaultParts.length > 1) {\n                                return defaultParts[1];\n                            }\n\n                        } else if (defaultParts.length > 1) {\n                            return defaultParts[1];\n                        }\n\n                        return match;\n                    });\n                }\n            }\n        }\n    }\n\n    return data;\n}"],"names":["chance","Chance","randomDatetime","start","end","d","Date","getTime","Math","random","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","length","join","findGap","numArray","let","i","min","apply","max","missingNums","indexOf","push","floatPrecision","a","isFinite","e","p","round","getMaxPrecision","floatArray","maxPrecision","precision","everythingCapitalized","stringArray","str","isCapitalized","capitalize","minNumber","intArray","maxNumber","minGapOfIntArray","value1","value2","minGap","abs","randomIntWithStep","step","range","rand","arguments","floor","maxStrLength","strArray","map","minWordCount","split","maxWordCount","minSentenceCount","maxSentenceCount","minParagraphCount","replace","maxParagraphCount","minDate","dateArray","maxDate","convertStringDateArray","stringDateArray","newArray","toUpperCase","isDatetimeString","test","isTimeString","getWeights","allEntries","uniqueEntries","entry","weightedEntries","weights","filterValue","value","filter","String","slugify","lower","toLowerCase","md5","const","txtgen","addTemplates","module","exports","data","type","row","field","types","typeDef","key","minID","maxID","totalCount","fields","fieldValue","fieldType","entries","cnt","_","uniq","repeatEntries","required","gap","settings","id","weighted","age","first","last","company","country","faker","internet","exampleEmail","color","ip","profession","url","city","street","parseInt","zip","weekday","hash","guid","commerce","productName","productMaterial","finance","iban","bic","image","avatar","userName","name","jobTitle","system","mimeType","minLength","maxLength","minWords","maxWords","minSentences","maxSentences","minParagraphs","maxParagraphs","article","paragraph","sentence","words","slice","word","string","minFloat","maxFloat","Number","toFixed","letter","casing","minDateDate","maxDateDate","hour","twentyfour","minute","second","match","capture","defaultParts","filterParts","parts","refRow","refField","refType","found"],"mappings":"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"}