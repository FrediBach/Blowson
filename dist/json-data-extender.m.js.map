{"version":3,"file":"json-data-extender.m.js","sources":["../src/helpers.js","../src/extend.js"],"sourcesContent":["import Chance from 'chance';\nconst chance = new Chance();\n\nexport function randomTime() {\n    let hours = String(chance.hour({ twentyfour: true })),\n        minutes = String(chance.minute()),\n        seconds = String(chance.second());\n\n    if (hours.length === 1) '0' + hours;\n    if (minutes.length === 1) '0' + minutes;\n    if (seconds.length === 1) '0' + seconds;\n\n    return [hours, minutes, seconds].join(':');\n}\n\nexport function randomDate(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nexport function randomDatetime(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear(),\n        hours = d.getHours(),\n        minutes = d.getMinutes(),\n        seconds = d.getSeconds();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-') + 'T' + [hours, minutes, seconds].join(':') + '+01:00';\n}\n\nexport function findGap(numArray) {\n    let min = Math.min.apply(Math, numArray),\n        max = Math.max.apply(Math, numArray),\n        missingNums = [],\n        i;\n\n    for (i = min; i <= max; i++) {\n        if (numArray.indexOf(i) == -1) {\n            missingNums.push(i);\n        }\n    }\n\n    if (missingNums.length > 0) {\n        return {\n            start: Math.min.apply(Math, missingNums),\n            end: Math.max.apply(Math, missingNums)\n        };\n    } else {\n        return false;\n    }\n}\n\nexport function floatPrecision(a) {\n    if (!isFinite(a)) return 0;\n\n    var e = 1, p = 0;\n\n    while (Math.round(a * e) / e !== a) {\n        e *= 10; p++;\n    }\n\n    return p;\n}\n\nexport function getMaxPrecision(floatArray) {\n    let maxPrecision = 0,\n        value;\n\n    for (value of floatArray) {\n        let precision = floatPrecision(value);\n\n        if (precision > maxPrecision) {\n            maxPrecision = precision;\n        }\n    }\n\n    return maxPrecision;\n}\n\nexport function everythingCapitalized(stringArray) {\n    let isCapitalized = true,\n        str;\n\n    for (str of stringArray) {\n        if (capitalize(str) !== str) {\n            isCapitalized = false;\n            break;\n        }\n    }\n\n    return isCapitalized;\n}\n\nexport function minNumber(intArray) {\n    return Math.min.apply(Math, intArray);\n}\n\nexport function maxNumber(intArray) {\n    return Math.max.apply(Math, intArray);\n}\n\nexport function minGapOfIntArray(intArray) {\n    let minGap = 999999999,\n        value1,\n        value2;\n\n    for (value1 of intArray) {\n        for (value2 of intArray) {\n            if (value1 !== value2 && Math.abs(value1 - value2) < minGap) {\n                minGap = Math.abs(value1 - value2);\n            }\n        }\n    }\n\n    return minGap;\n}\n\nexport function randomIntWithStep(min, max, step) {\n    let delta,\n        range,\n        rand;\n\n    if (arguments.length < 2) {\n        max = min;\n        min = 0;\n    }\n\n    if (!step) {\n        step = 1;\n    }\n\n    delta = max - min;\n    range = delta / step;\n    rand = Math.random();\n    rand *= range;\n    rand = Math.floor(rand);\n    rand *= step;\n    rand += min;\n\n    return rand;\n}\n\nexport function minStrLength(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function maxStrLength(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function minWordCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function maxWordCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function minSentenceCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function maxSentenceCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function minParagraphCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function maxParagraphCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function minDate(dateArray) {\n    return new Date(Math.min.apply(null, dateArray));\n}\n\nexport function maxDate(dateArray) {\n    return new Date(Math.max.apply(null, dateArray));\n}\n\nexport function convertStringDateArray(stringDateArray) {\n    let newArray = [],\n        dateString;\n\n    for (dateString of stringDateArray) {\n        newArray.push(new Date(dateString));\n    }\n\n    return newArray;\n}\n\nexport function capitalize(str) {\n    return str.replace(/(?:^|\\s)\\S/g, function (a) { return a.toUpperCase(); });\n};\n\nexport function isDateString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(str);\n}\n\nexport function isDatetimeString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function isTimeString(str) {\n    return /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function getWeights(allEntries, uniqueEntries) {\n    let weightedEntries = {},\n        weights = [],\n        entry;\n    \n    for (entry of allEntries) {\n        if (typeof weightedEntries[entry] === 'undefined') {\n            weightedEntries[entry] = 1;\n        } else {\n            weightedEntries[entry]++;\n        }\n    }\n\n    for (entry of uniqueEntries) {\n        weights.push(weightedEntries[entry]);\n    }\n\n    return weights;\n}","import _ from 'lodash';\nimport txtgen from 'txtgen';\nimport Chance from 'chance';\n\nimport {\n    randomTime,\n    randomDate,\n    randomDatetime,\n    findGap,\n    getMaxPrecision,\n    everythingCapitalized,\n    minNumber,\n    maxNumber,\n    minGapOfIntArray,\n    randomIntWithStep,\n    minStrLength,\n    maxStrLength,\n    minWordCount,\n    maxWordCount,\n    minSentenceCount,\n    maxSentenceCount,\n    minParagraphCount,\n    maxParagraphCount,\n    minDate,\n    maxDate,\n    convertStringDateArray,\n    capitalize,\n    isDateString,\n    isDatetimeString,\n    isTimeString,\n    getWeights\n} from './helpers';\n\nconst chance = new Chance();\n\nmodule.exports = function extendData(data) {\n    let types = [],\n        type;\n\n    for (type in data) {\n        let typeDef = {\n                key: type,\n                minID: 1,\n                maxID: 1,\n                totalCount: 0,\n                fields: {}\n            },\n            entry,\n            field;\n\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                let fieldValue = data[type][entry][field],\n                    fieldType = 'undefined';\n\n                if (typeof fieldValue === 'boolean') {\n                    fieldType = 'boolean';\n                } else if (typeof fieldValue === 'number') {\n                    if (Math.round(fieldValue) === fieldValue) {\n                        fieldType = 'int';\n                    } else {\n                        fieldType = 'float';\n                    }\n                } else if (typeof fieldValue === 'string') {\n                    if (isDateString(fieldValue)) {\n                        fieldType = 'date';\n                    } else if (isDatetimeString(fieldValue)) {\n                        fieldType = 'datetime';\n                    } else if (isTimeString(fieldValue)) {\n                        fieldType = 'time';\n                    } else if (fieldValue.length === 1) {\n                        fieldType = 'char';\n                    } else {\n                        fieldType = 'string';\n                    }\n                } else if (typeof fieldValue === 'object') {\n                    fieldType = 'JSON';\n                }\n\n                if (typeof typeDef.fields[field] === 'undefined') {\n                    typeDef.fields[field] = {\n                        types: [fieldType],\n                        entries: [fieldValue],\n                        allEntries: [fieldValue],\n                        cnt: 1\n                    };\n                } else {\n                    typeDef.fields[field].types.push(fieldType);\n                    typeDef.fields[field].types = _.uniq(typeDef.fields[field].types);\n                    typeDef.fields[field].entries.push(fieldValue);\n                    typeDef.fields[field].entries = _.uniq(typeDef.fields[field].entries);\n                    typeDef.fields[field].allEntries.push(fieldValue);\n                    typeDef.fields[field].cnt++;\n                }\n            }\n        }\n\n        for (field in typeDef.fields) {\n            if (field === 'id') {\n                typeDef.totalCount = typeDef.fields[field].cnt;\n            }\n            if (typeDef.fields[field].types.length === 1) {\n                typeDef.fields[field].type = typeDef.fields[field].types[0];\n            }\n            if (typeDef.fields[field].entries.length < typeDef.fields[field].cnt) {\n                typeDef.fields[field].repeatEntries = true;\n                typeDef.fields[field].weights = getWeights(typeDef.fields[field].allEntries, typeDef.fields[field].entries);\n            } else {\n                typeDef.fields[field].repeatEntries = false;\n            }\n            if (typeDef.fields[field].cnt < typeDef.totalCount) {\n                typeDef.fields[field].required = false;\n            } else {\n                typeDef.fields[field].required = true;\n            }\n        }\n\n        typeDef.gap = findGap(typeDef.fields['id'].entries);\n\n        types.push(typeDef);\n    }\n\n    for (type in types) {\n        let settings = types[type];\n\n        if (settings.gap) {\n            let id,\n                field;\n\n            for (id = settings.gap.start; id <= settings.gap.end; id++) {\n                let row = {};\n\n                for (field in settings.fields) {\n                    let value = '';\n\n                    if (settings.fields[field].repeatEntries) {\n                        value = chance.weighted(settings.fields[field].entries, settings.fields[field].weights);\n                    }\n\n                    if (field === 'id') value = id;\n                    if (field === 'age' && settings.fields[field].type === 'int') value = chance.age();\n                    if (field === 'firstname' && settings.fields[field].type === 'string') value = chance.first();\n                    if (field === 'lastname' && settings.fields[field].type === 'string') value = chance.last();\n                    if (field === 'company' && settings.fields[field].type === 'string') value = chance.company();\n                    if (field === 'country' && settings.fields[field].type === 'string') value = chance.country();\n                    if (field === 'email' && settings.fields[field].type === 'string') value = chance.email();\n                    if (field === 'color' && settings.fields[field].type === 'string') value = chance.color();\n                    if (field === 'ip' && settings.fields[field].type === 'string') value = chance.ip();\n                    if (field === 'profession' && settings.fields[field].type === 'string') value = chance.profession();\n                    if (field === 'url' && settings.fields[field].type === 'string') value = chance.url();\n                    if (field === 'city' && settings.fields[field].type === 'string') value = chance.city();\n                    if (field === 'street' && settings.fields[field].type === 'string') value = chance.street();\n                    if (field === 'zip' && settings.fields[field].type === 'int') value = parseInt(chance.zip());\n                    if (field === 'weekday' && settings.fields[field].type === 'string') value = chance.weekday();\n                    if (field === 'year' && settings.fields[field].type === 'int') value = parseInt(chance.year());\n                    if (field === 'password' && settings.fields[field].type === 'string') value = chance.hash();\n                    if (field === 'guid' && settings.fields[field].type === 'string') value = chance.guid();\n\n                    if (value === '' && settings.fields[field].type === 'JSON') {\n                        value = {};\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'string') {\n                        let minLength = minStrLength(settings.fields[field].entries),\n                            maxLength = maxStrLength(settings.fields[field].entries),\n                            minWords = minWordCount(settings.fields[field].entries),\n                            maxWords = maxWordCount(settings.fields[field].entries),\n                            minSentences = minSentenceCount(settings.fields[field].entries),\n                            maxSentences = maxSentenceCount(settings.fields[field].entries),\n                            minParagraphs = minParagraphCount(settings.fields[field].entries),\n                            maxParagraphs = maxParagraphCount(settings.fields[field].entries);\n\n                        if (maxParagraphs > 1) {\n                            value = txtgen.article(Math.floor(Math.random() * maxParagraphs) + minParagraphs);\n                        } else if (maxSentences > 1) {\n                            value = txtgen.paragraph(Math.floor(Math.random() * maxSentences) + minSentences);\n                        } else if (maxWords > 1) {\n                            value = chance.sentence({ words: Math.floor(Math.random() * maxWords) + minWords }).slice(0, -1);\n                        } else {\n                            if (settings.fields[field].entries[0][0].toUpperCase() === settings.fields[field].entries[0][0]) {\n                                value = chance.capitalize(chance.word({ length: Math.floor(Math.random() * minLength) + maxLength }));\n                            } else {\n                                value = chance.string({ length: Math.floor(Math.random() * minLength) + maxLength });\n                            }\n                        }\n\n                        if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                            value = value.toUpperCase();\n                        } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                            value = value.toLowerCase();\n                        } else if (everythingCapitalized(settings.fields[field].entries)) {\n                            value = capitalize(value);\n                        }\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'int') {\n                        let minInt = minNumber(settings.fields[field].entries),\n                            maxInt = maxNumber(settings.fields[field].entries),\n                            minGap = minGapOfIntArray(settings.fields[field].entries);\n\n                        value = randomIntWithStep(minInt, maxInt, minGap);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'float') {\n                        let minFloat = minNumber(settings.fields[field].entries),\n                            maxFloat = maxNumber(settings.fields[field].entries),\n                            maxPrecision = getMaxPrecision(settings.fields[field].entries);\n\n                        value = Number((Math.random() * maxFloat + minFloat).toFixed(maxPrecision));\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'char') {\n                        if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                            value = chance.letter({ casing: 'upper' });\n                        } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                            value = chance.letter({ casing: 'lower' });\n                        } else {\n                            value = chance.letter();\n                        }\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'date') {\n                        let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                            maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                        value = randomDate(minDateDate, maxDateDate);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'datetime') {\n                        let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                            maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                        value = randomDatetime(minDateDate, maxDateDate);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'time') {\n                        value = randomTime();\n                    }\n\n                    if (settings.fields[field].required || Math.random() >= 0.5) {\n                        row[field] = value;\n                    }\n                }\n\n                data[settings.key].push(row);\n            }\n\n        }\n    }\n\n    return data;\n}"],"names":["const","chance","Chance","randomDatetime","start","end","d","Date","getTime","Math","random","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","length","join","findGap","numArray","let","i","min","apply","max","missingNums","indexOf","push","floatPrecision","a","isFinite","e","p","round","getMaxPrecision","floatArray","maxPrecision","precision","everythingCapitalized","stringArray","str","isCapitalized","capitalize","minNumber","intArray","maxNumber","minGapOfIntArray","value1","value2","minGap","abs","randomIntWithStep","step","range","rand","arguments","floor","maxStrLength","strArray","map","minWordCount","split","maxWordCount","minSentenceCount","maxSentenceCount","minParagraphCount","replace","maxParagraphCount","minDate","dateArray","maxDate","convertStringDateArray","stringDateArray","newArray","toUpperCase","isDatetimeString","test","isTimeString","getWeights","allEntries","uniqueEntries","entry","weightedEntries","weights","module","exports","data","type","types","typeDef","key","minID","maxID","totalCount","fields","field","fieldValue","fieldType","entries","cnt","_","uniq","repeatEntries","required","gap","settings","id","row","value","weighted","age","first","last","company","country","email","color","ip","profession","url","city","street","parseInt","zip","weekday","hash","guid","minLength","maxLength","minWords","maxWords","minSentences","maxSentences","minParagraphs","maxParagraphs","txtgen","article","paragraph","sentence","words","slice","word","string","toLowerCase","minFloat","maxFloat","Number","toFixed","letter","casing","minDateDate","maxDateDate","String","hour","twentyfour","minute","second"],"mappings":"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"}