{"version":3,"file":"json-data-extender.m.js","sources":["../src/extend.js"],"sourcesContent":["const _ = require('lodash');\nconst txtgen = require('txtgen');\nconst Chance = require('chance');\nconst chance = new Chance();\nconst {\n    randomTime,\n    randomDate,\n    randomDatetime,\n    findGap,\n    getMaxPrecision,\n    everythingCapitalized,\n    minNumber,\n    maxNumber,\n    minGapOfIntArray,\n    randomIntWithStep,\n    minStrLength,\n    maxStrLength,\n    minWordCount,\n    maxWordCount,\n    minSentenceCount,\n    maxSentenceCount,\n    minParagraphCount,\n    maxParagraphCount,\n    minDate,\n    maxDate,\n    convertStringDateArray,\n    capitalize,\n    isDateString,\n    isDatetimeString,\n    isTimeString,\n    getWeights\n} = require('./helpers');\n\nmodule.exports = function extendData(data) {\n    let types = [],\n        type;\n\n    for (type in data) {\n        let typeDef = {\n                key: type,\n                minID: 1,\n                maxID: 1,\n                totalCount: 0,\n                fields: {}\n            },\n            entry,\n            field;\n\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                let fieldValue = data[type][entry][field],\n                    fieldType = 'undefined';\n\n                if (typeof fieldValue === 'boolean') {\n                    fieldType = 'boolean';\n                } else if (typeof fieldValue === 'number') {\n                    if (Math.round(fieldValue) === fieldValue) {\n                        fieldType = 'int';\n                    } else {\n                        fieldType = 'float';\n                    }\n                } else if (typeof fieldValue === 'string') {\n                    if (isDateString(fieldValue)) {\n                        fieldType = 'date';\n                    } else if (isDatetimeString(fieldValue)) {\n                        fieldType = 'datetime';\n                    } else if (isTimeString(fieldValue)) {\n                        fieldType = 'time';\n                    } else if (fieldValue.length === 1) {\n                        fieldType = 'char';\n                    } else {\n                        fieldType = 'string';\n                    }\n                } else if (typeof fieldValue === 'object') {\n                    fieldType = 'JSON';\n                }\n\n                if (typeof typeDef.fields[field] === 'undefined') {\n                    typeDef.fields[field] = {\n                        types: [fieldType],\n                        entries: [fieldValue],\n                        allEntries: [fieldValue],\n                        cnt: 1\n                    };\n                } else {\n                    typeDef.fields[field].types.push(fieldType);\n                    typeDef.fields[field].types = _.uniq(typeDef.fields[field].types);\n                    typeDef.fields[field].entries.push(fieldValue);\n                    typeDef.fields[field].entries = _.uniq(typeDef.fields[field].entries);\n                    typeDef.fields[field].allEntries.push(fieldValue);\n                    typeDef.fields[field].cnt++;\n                }\n            }\n        }\n\n        for (field in typeDef.fields) {\n            if (field === 'id') {\n                typeDef.totalCount = typeDef.fields[field].cnt;\n            }\n            if (typeDef.fields[field].types.length === 1) {\n                typeDef.fields[field].type = typeDef.fields[field].types[0];\n            }\n            if (typeDef.fields[field].entries.length < typeDef.fields[field].cnt) {\n                typeDef.fields[field].repeatEntries = true;\n                typeDef.fields[field].weights = getWeights(typeDef.fields[field].allEntries, typeDef.fields[field].entries);\n            } else {\n                typeDef.fields[field].repeatEntries = false;\n            }\n            if (typeDef.fields[field].cnt < typeDef.totalCount) {\n                typeDef.fields[field].required = false;\n            } else {\n                typeDef.fields[field].required = true;\n            }\n        }\n\n        typeDef.gap = findGap(typeDef.fields['id'].entries);\n\n        types.push(typeDef);\n    }\n\n    for (type in types) {\n        let settings = types[type];\n\n        if (settings.gap) {\n            let id,\n                field;\n\n            for (id = settings.gap.start; id <= settings.gap.end; id++) {\n                let row = {};\n\n                for (field in settings.fields) {\n                    let value = '';\n\n                    if (settings.fields[field].repeatEntries) {\n                        value = chance.weighted(settings.fields[field].entries, settings.fields[field].weights);\n                    }\n\n                    if (field === 'id') value = id;\n                    if (field === 'age' && settings.fields[field].type === 'int') value = chance.age();\n                    if (field === 'firstname' && settings.fields[field].type === 'string') value = chance.first();\n                    if (field === 'lastname' && settings.fields[field].type === 'string') value = chance.last();\n                    if (field === 'company' && settings.fields[field].type === 'string') value = chance.company();\n                    if (field === 'country' && settings.fields[field].type === 'string') value = chance.country();\n                    if (field === 'email' && settings.fields[field].type === 'string') value = chance.email();\n                    if (field === 'color' && settings.fields[field].type === 'string') value = chance.color();\n                    if (field === 'ip' && settings.fields[field].type === 'string') value = chance.ip();\n                    if (field === 'profession' && settings.fields[field].type === 'string') value = chance.profession();\n                    if (field === 'url' && settings.fields[field].type === 'string') value = chance.url();\n                    if (field === 'city' && settings.fields[field].type === 'string') value = chance.city();\n                    if (field === 'street' && settings.fields[field].type === 'string') value = chance.street();\n                    if (field === 'zip' && settings.fields[field].type === 'int') value = parseInt(chance.zip());\n                    if (field === 'weekday' && settings.fields[field].type === 'string') value = chance.weekday();\n                    if (field === 'year' && settings.fields[field].type === 'int') value = parseInt(chance.year());\n                    if (field === 'password' && settings.fields[field].type === 'string') value = chance.hash();\n                    if (field === 'guid' && settings.fields[field].type === 'string') value = chance.guid();\n\n                    if (value === '' && settings.fields[field].type === 'JSON') {\n                        value = {};\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'string') {\n                        let minLength = minStrLength(settings.fields[field].entries),\n                            maxLength = maxStrLength(settings.fields[field].entries),\n                            minWords = minWordCount(settings.fields[field].entries),\n                            maxWords = maxWordCount(settings.fields[field].entries),\n                            minSentences = minSentenceCount(settings.fields[field].entries),\n                            maxSentences = maxSentenceCount(settings.fields[field].entries),\n                            minParagraphs = minParagraphCount(settings.fields[field].entries),\n                            maxParagraphs = maxParagraphCount(settings.fields[field].entries);\n\n                        if (maxParagraphs > 1) {\n                            value = txtgen.article(Math.floor(Math.random() * maxParagraphs) + minParagraphs);\n                        } else if (maxSentences > 1) {\n                            value = txtgen.paragraph(Math.floor(Math.random() * maxSentences) + minSentences);\n                        } else if (maxWords > 1) {\n                            value = chance.sentence({ words: Math.floor(Math.random() * maxWords) + minWords }).slice(0, -1);\n                        } else {\n                            if (settings.fields[field].entries[0][0].toUpperCase() === settings.fields[field].entries[0][0]) {\n                                value = chance.capitalize(chance.word({ length: Math.floor(Math.random() * minLength) + maxLength }));\n                            } else {\n                                value = chance.string({ length: Math.floor(Math.random() * minLength) + maxLength });\n                            }\n                        }\n\n                        if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                            value = value.toUpperCase();\n                        } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                            value = value.toLowerCase();\n                        } else if (everythingCapitalized(settings.fields[field].entries)) {\n                            value = capitalize(value);\n                        }\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'int') {\n                        let minInt = minNumber(settings.fields[field].entries),\n                            maxInt = maxNumber(settings.fields[field].entries),\n                            minGap = minGapOfIntArray(settings.fields[field].entries);\n\n                        value = randomIntWithStep(minInt, maxInt, minGap);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'float') {\n                        let minFloat = minNumber(settings.fields[field].entries),\n                            maxFloat = maxNumber(settings.fields[field].entries),\n                            maxPrecision = getMaxPrecision(settings.fields[field].entries);\n\n                        value = Number((Math.random() * maxFloat + minFloat).toFixed(maxPrecision));\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'char') {\n                        if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                            value = chance.letter({ casing: 'upper' });\n                        } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                            value = chance.letter({ casing: 'lower' });\n                        } else {\n                            value = chance.letter();\n                        }\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'date') {\n                        let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                            maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                        value = randomDate(minDateDate, maxDateDate);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'datetime') {\n                        let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                            maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries));\n\n                        value = randomDatetime(minDateDate, maxDateDate);\n                    }\n\n                    if (value === '' && settings.fields[field].type === 'time') {\n                        value = randomTime();\n                    }\n\n                    if (settings.fields[field].required || Math.random() >= 0.5) {\n                        row[field] = value;\n                    }\n                }\n\n                data[settings.key].push(row);\n            }\n\n        }\n    }\n\n    return data;\n}"],"names":["const","_","require","txtgen","chance","module","exports","data","let","type","types","typeDef","key","minID","maxID","totalCount","fields","entry","field","fieldValue","fieldType","Math","round","isDateString","isDatetimeString","isTimeString","length","entries","allEntries","cnt","push","uniq","repeatEntries","weights","getWeights","required","gap","findGap","settings","id","start","end","row","value","weighted","age","first","last","company","country","email","color","ip","profession","url","city","street","parseInt","zip","weekday","year","hash","guid","minLength","minStrLength","maxLength","maxStrLength","minWords","minWordCount","maxWords","maxWordCount","minSentences","minSentenceCount","maxSentences","maxSentenceCount","minParagraphs","minParagraphCount","maxParagraphs","maxParagraphCount","article","floor","random","paragraph","sentence","words","slice","toUpperCase","capitalize","word","string","toLowerCase","everythingCapitalized","minInt","minNumber","maxInt","maxNumber","minGap","minGapOfIntArray","randomIntWithStep","minFloat","maxFloat","maxPrecision","getMaxPrecision","Number","toFixed","letter","casing","minDateDate","minDate","convertStringDateArray","maxDateDate","maxDate","randomDate","randomDatetime","randomTime"],"mappings":"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"}