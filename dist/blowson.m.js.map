{"version":3,"file":"blowson.m.js","sources":["../src/txtgen/util.js","../src/txtgen/sample.js","../src/txtgen/main.js","../src/helpers.js","../src/blowson.js"],"sourcesContent":["// utils\n\nimport {\n  vowels,\n} from './sample';\n\nexport const unique = (a) => {\n  let r = [];\n  for (let i = 0; i < a.length; i++) {\n    if (r.indexOf(a[i]) === -1) {\n      r.push(a[i]);\n    }\n  }\n  return r;\n};\n\nexport const random = (min, max) => {\n  let offset = min;\n  let range = max - min + 1;\n  let rd = Math.floor(Math.random() * range) + offset;\n  return rd;\n};\n\nexport const rand = (a) => {\n  let w;\n  while (!w) {\n    w = a[random(0, a.length - 1)];\n  }\n  return w;\n};\n\nexport const pickLastPunc = () => {\n  let a = '.......!?!?;...'.split('');\n  return rand(a);\n};\n\nexport const pluralize = (word) => {\n  if (word.endsWith('s')) {\n    return word;\n  }\n  if (word.match(/(ss|ish|ch|x|us)$/)) {\n    word += 'e';\n  } else if (word.endsWith('y') && !vowels.includes(word.charAt(word.length - 2))) {\n    word = word.slice(0, word.length - 1);\n    word += 'ie';\n  }\n  return word + 's';\n};\n\nexport const normalize = (word) => {\n  let a = 'a';\n  if (word.match(/^(a|e|i|o)/)) {\n    a = 'an';\n  }\n  return `${a} ${word}`;\n};\n","// samples\n\nimport {\n  unique,\n} from './util';\n\n/* eslint-disable */\nexport var nouns = [ 'alligator', 'ant', 'bear', 'bee', 'bird', 'camel', 'cat', 'cheetah', 'chicken', 'chimpanzee', 'cow', 'crocodile', 'deer', 'dog', 'dolphin', 'duck', 'eagle', 'elephant', 'fish', 'fly', 'fox', 'frog', 'giraffe', 'goat', 'goldfish', 'hamster', 'hippopotamus', 'horse', 'kangaroo', 'kitten', 'lion', 'lobster', 'monkey', 'octopus', 'owl', 'panda', 'pig', 'puppy', 'rabbit', 'rat', 'scorpion', 'seal', 'shark', 'sheep', 'snail', 'snake', 'spider', 'squirrel', 'tiger', 'turtle', 'wolf', 'zebra', 'apple', 'apricot', 'banana', 'blackberry', 'blueberry', 'cherry', 'cranberry', 'currant', 'fig', 'grape', 'grapefruit', 'grapes', 'kiwi', 'kumquat', 'lemon', 'lime', 'melon', 'nectarine', 'orange', 'peach', 'pear', 'persimmon', 'pineapple', 'plum', 'pomegranate', 'prune', 'raspberry', 'strawberry', 'tangerine', 'watermelon' ];\nexport var adjectives = [ 'adaptable', 'adventurous', 'affable', 'affectionate', 'agreeable', 'alert', 'alluring', 'ambitious', 'ambitious', 'amiable', 'amicable', 'amused', 'amusing', 'boundless', 'brave', 'brave', 'bright', 'bright', 'broad-minded', 'calm', 'calm', 'capable', 'careful', 'charming', 'charming', 'cheerful', 'coherent', 'comfortable', 'communicative', 'compassionate', 'confident', 'conscientious', 'considerate', 'convivial', 'cooperative', 'courageous', 'courageous', 'courteous', 'creative', 'credible', 'cultured', 'dashing', 'dazzling', 'debonair', 'decisive', 'decisive', 'decorous', 'delightful', 'detailed', 'determined', 'determined', 'diligent', 'diligent', 'diplomatic', 'discreet', 'discreet', 'dynamic', 'dynamic', 'eager', 'easygoing', 'efficient', 'elated', 'eminent', 'emotional', 'enchanting', 'encouraging', 'endurable', 'energetic', 'energetic', 'entertaining', 'enthusiastic', 'enthusiastic', 'excellent', 'excited', 'exclusive', 'exuberant', 'exuberant', 'fabulous', 'fair', 'fair-minded', 'faithful', 'faithful', 'fantastic', 'fearless', 'fearless', 'fine', 'forceful', 'frank', 'frank', 'friendly', 'friendly', 'funny', 'funny', 'generous', 'generous', 'gentle', 'gentle', 'glorious', 'good', 'good', 'gregarious', 'happy', 'hard-working', 'harmonious', 'helpful', 'helpful', 'hilarious', 'honest', 'honorable', 'humorous', 'imaginative', 'impartial', 'impartial', 'independent', 'industrious', 'instinctive', 'intellectual', 'intelligent', 'intuitive', 'inventive', 'jolly', 'joyous', 'kind', 'kind', 'kind-hearted', 'knowledgeable', 'level', 'likeable', 'lively', 'lovely', 'loving', 'loving', 'loyal', 'lucky', 'mature', 'modern', 'modest', 'neat', 'nice', 'nice', 'obedient', 'optimistic', 'painstaking', 'passionate', 'patient', 'peaceful', 'perfect', 'persistent', 'philosophical', 'pioneering', 'placid', 'placid', 'plausible', 'pleasant', 'plucky', 'plucky', 'polite', 'powerful', 'practical', 'pro-active', 'productive', 'protective', 'proud', 'punctual', 'quick-witted', 'quiet', 'quiet', 'rational', 'receptive', 'reflective', 'reliable', 'relieved', 'reserved', 'resolute', 'resourceful', 'responsible', 'rhetorical', 'righteous', 'romantic', 'romantic', 'sedate', 'seemly', 'selective', 'self-assured', 'self-confident', 'self-disciplined', 'sensible', 'sensitive', 'sensitive', 'shrewd', 'shy', 'silly', 'sincere', 'sincere', 'skillful', 'smiling', 'sociable', 'splendid', 'steadfast', 'stimulating', 'straightforward', 'successful', 'succinct', 'sympathetic', 'talented', 'thoughtful', 'thoughtful', 'thrifty', 'tidy', 'tough', 'tough', 'trustworthy', 'unassuming', 'unbiased', 'understanding', 'unusual', 'upbeat', 'versatile', 'vigorous', 'vivacious', 'warm', 'warmhearted', 'willing', 'willing', 'wise', 'witty', 'witty', 'wonderful' ];\n\nexport var vowels = [\n  'a', 'e', 'i', 'o', 'u', 'y'\n];\n\nexport var sentenceTemplates = [\n  'the {{noun}} is {{a_noun}}',\n  '{{a_noun}} is {{an_adjective}} {{noun}}',\n  'the first {{adjective}} {{noun}} is, in its own way, {{a_noun}}',\n  'their {{noun}} was, in this moment, {{an_adjective}} {{noun}}',\n  '{{a_noun}} is {{a_noun}} from the right perspective',\n  'the literature would have us believe that {{an_adjective}} {{noun}} is not but {{a_noun}}',\n  '{{an_adjective}} {{noun}} is {{a_noun}} of the mind',\n  'the {{adjective}} {{noun}} reveals itself as {{an_adjective}} {{noun}} to those who look',\n  'authors often misinterpret the {{noun}} as {{an_adjective}} {{noun}}, when in actuality it feels more like {{an_adjective}} {{noun}}',\n  'we can assume that any instance of {{a_noun}} can be construed as {{an_adjective}} {{noun}}',\n  'they were lost without the {{adjective}} {{noun}} that composed their {{noun}}',\n  'the {{adjective}} {{noun}} comes from {{an_adjective}} {{noun}}',\n  '{{a_noun}} can hardly be considered {{an_adjective}} {{noun}} without also being {{a_noun}}',\n  'few can name {{an_adjective}} {{noun}} that isn\\'t {{an_adjective}} {{noun}}',\n  'some posit the {{adjective}} {{noun}} to be less than {{adjective}}',\n  '{{a_noun}} of the {{noun}} is assumed to be {{an_adjective}} {{noun}}',\n  '{{a_noun}} sees {{a_noun}} as {{an_adjective}} {{noun}}',\n  'the {{noun}} of {{a_noun}} becomes {{an_adjective}} {{noun}}',\n  '{{a_noun}} is {{a_noun}}\\'s {{noun}}',\n  '{{a_noun}} is the {{noun}} of {{a_noun}}',\n  '{{an_adjective}} {{noun}}\\'s {{noun}} comes with it the thought that the {{adjective}} {{noun}} is {{a_noun}}',\n  '{{nouns}} are {{adjective}} {{nouns}}',\n  '{{adjective}} {{nouns}} show us how {{nouns}} can be {{nouns}}',\n  'before {{nouns}}, {{nouns}} were only {{nouns}}',\n  'those {{nouns}} are nothing more than {{nouns}}',\n  'some {{adjective}} {{nouns}} are thought of simply as {{nouns}}',\n  'one cannot separate {{nouns}} from {{adjective}} {{nouns}}',\n  'the {{nouns}} could be said to resemble {{adjective}} {{nouns}}',\n  '{{an_adjective}} {{noun}} without {{nouns}} is truly a {{noun}} of {{adjective}} {{nouns}}'\n];\n\nexport var phrases = [\n  'to be more specific, ',\n  'in recent years, ',\n  'however, ',\n  'by the way',\n  'of course, ',\n  'some assert that ',\n  'if this was somewhat unclear, ',\n  'unfortunately, that is wrong; on the contrary, ',\n  'it\\'s very tricky, if not impossible, ',\n  'this could be, or perhaps ',\n  'this is not to discredit the idea that ',\n  'we know that ',\n  'it\\'s an undeniable fact, really; ',\n  'framed in a different way, ',\n  'what we don\\'t know for sure is whether or not ',\n  'as far as we can estimate, ',\n  'as far as he is concerned, ',\n  'the zeitgeist contends that ',\n  'though we assume the latter, ',\n  'far from the truth, ',\n  'extending this logic, ',\n  'nowhere is it disputed that ',\n  'in modern times ',\n  'in ancient times ',\n  'recent controversy aside, ',\n  'washing and polishing the car,',\n  'having been a gymnast, ',\n  'after a long day at school and work, ',\n  'waking to the buzz of the alarm clock, ',\n  'draped neatly on a hanger, ',\n  'shouting with happiness, '\n];\n/* eslint-enable */\n\nexport const addNouns = (ls = []) => {\n  let a = nouns.concat(ls);\n  nouns = unique(a);\n  return nouns.length;\n};\n\nexport const addAdjectives = (ls) => {\n  let a = adjectives.concat(ls);\n  adjectives = unique(a);\n  return adjectives.length;\n};\n\nexport const addTemplates = (ls) => {\n  let a = sentenceTemplates.concat(ls);\n  sentenceTemplates = unique(a);\n  return sentenceTemplates.length;\n};\n\n","/**\n * txtgen\n * @ndaidong\n**/\n\nimport {\n  nouns,\n  adjectives,\n  sentenceTemplates,\n  phrases,\n} from './sample';\n\nimport {\n  random,\n  rand,\n  pickLastPunc,\n  pluralize,\n  normalize,\n} from './util';\n\nexport {\n  addNouns,\n  addAdjectives,\n  addTemplates,\n} from './sample';\n\nlet actions = [\n  'noun', 'a_noun', 'nouns',\n  'adjective', 'an_adjective',\n];\n\nexport const generator = {\n  noun: () => {\n    return rand(nouns);\n  },\n  a_noun: () => { // eslint-disable-line camelcase\n    return normalize(rand(nouns));\n  },\n  nouns: () => {\n    return pluralize(rand(nouns));\n  },\n  adjective: () => {\n    return rand(adjectives);\n  },\n  an_adjective: () => { // eslint-disable-line camelcase\n    return normalize(rand(adjectives));\n  },\n};\n\nconst trim = (s) => {\n  return s.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '')\n    .replace(/\\r?\\n|\\r/g, ' ')\n    .replace(/\\s\\s+|\\r/g, ' ');\n};\n\nconst make = (template) => {\n  let sentence = template;\n  let occurrences = template.match(/\\{\\{(.+?)\\}\\}/g);\n\n  if (occurrences && occurrences.length) {\n    for (let i = 0; i < occurrences.length; i++) {\n      let action = trim(occurrences[i].replace('{{', '').replace('}}', ''));\n      let result;\n      if (actions.includes(action)) {\n        result = generator[action]();\n      }\n      sentence = sentence.replace(occurrences[i], result);\n    }\n  }\n  return sentence;\n};\n\nconst randomStartingPhrase = () => {\n  if (Math.random() < 0.33) {\n    return rand(phrases);\n  }\n  return '';\n};\n\nconst makeSentenceFromTemplate = () => {\n  return make(rand(sentenceTemplates));\n};\n\nexport const sentence = () => {\n  let phrase = randomStartingPhrase();\n  let s = phrase + makeSentenceFromTemplate();\n  s = s.charAt(0).toUpperCase() + s.slice(1);\n  s += pickLastPunc();\n  if (Math.random() >= 0.9) {\n    let quotationEntries = [\n      'He said',\n      'She said',\n      'In his own words',\n      'In her own words',\n      'Yelling',\n      'Wispering',\n      'Quoting with intend'\n    ];\n    s = `${rand(quotationEntries)}: \"${s}\"`;\n  }\n  return s;\n};\n\nexport const paragraph = (len = 0) => {\n  if (!len) {\n    len = random(3, 10);\n  }\n  let t = Math.min(len, 15);\n  let a = [];\n  while (a.length < t) {\n    let s = sentence();\n    a.push(s);\n  }\n  return a.join(' ');\n};\n\nexport const article = (len = 0) => {\n  if (!len) {\n    len = random(3, 10);\n  }\n  let t = Math.min(len, 15);\n  let a = [];\n  while (a.length < t) {\n    let s = paragraph();\n    a.push(s);\n  }\n  return a.join('\\n\\n');\n};\n","import Chance from 'chance';\nimport slugify from 'slugify';\nimport md5 from 'md5';\nimport {format} from 'date-fns';\nimport numeral from 'numeral';\nimport marked from 'marked';\nimport Prob from 'prob.js';\nimport {pluralize} from './txtgen/util';\n\nconst chance = new Chance();\n\nexport function randomTime() {\n    let hours = String(chance.hour({ twentyfour: true })),\n        minutes = String(chance.minute()),\n        seconds = String(chance.second());\n\n    if (hours.length === 1) '0' + hours;\n    if (minutes.length === 1) '0' + minutes;\n    if (seconds.length === 1) '0' + seconds;\n\n    return [hours, minutes, seconds].join(':');\n}\n\nexport function randomDate(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nexport function randomDatetime(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear(),\n        hours = '' + d.getHours(),\n        minutes = '' + d.getMinutes(),\n        seconds = '' + d.getSeconds();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    if (hours.length < 2) hours = '0' + hours;\n    if (minutes.length < 2) minutes = '0' + minutes;\n    if (seconds.length < 2) seconds = '0' + seconds;\n\n    return [year, month, day].join('-') + 'T' + [hours, minutes, seconds].join(':') + '+01:00';\n}\n\nexport function findGap(numArray) {\n    let min = Math.min.apply(Math, numArray),\n        max = Math.max.apply(Math, numArray),\n        missingNums = [],\n        i;\n\n    for (i = min; i <= max; i++) {\n        if (numArray.indexOf(i) == -1) {\n            missingNums.push(i);\n        }\n    }\n\n    if (missingNums.length > 0) {\n        return {\n            start: Math.min.apply(Math, missingNums),\n            end: Math.max.apply(Math, missingNums)\n        };\n    } else {\n        return false;\n    }\n}\n\nexport function floatPrecision(a) {\n    if (!isFinite(a)) return 0;\n\n    var e = 1, p = 0;\n\n    while (Math.round(a * e) / e !== a) {\n        e *= 10; p++;\n    }\n\n    return p;\n}\n\nexport function getMaxPrecision(floatArray) {\n    let maxPrecision = 0,\n        value;\n\n    for (value of floatArray) {\n        let precision = floatPrecision(value);\n\n        if (precision > maxPrecision) {\n            maxPrecision = precision;\n        }\n    }\n\n    return maxPrecision;\n}\n\nexport function everythingCapitalized(stringArray) {\n    let isCapitalized = true,\n        str;\n\n    for (str of stringArray) {\n        if (capitalize(str) !== str) {\n            isCapitalized = false;\n            break;\n        }\n    }\n\n    return isCapitalized;\n}\n\nexport function minNumber(intArray) {\n    return Math.min.apply(Math, intArray);\n}\n\nexport function maxNumber(intArray) {\n    return Math.max.apply(Math, intArray);\n}\n\nexport function minGapOfIntArray(intArray) {\n    let minGap = 999999999,\n        value1,\n        value2;\n\n    for (value1 of intArray) {\n        for (value2 of intArray) {\n            if (value1 !== value2 && Math.abs(value1 - value2) < minGap) {\n                minGap = Math.abs(value1 - value2);\n            }\n        }\n    }\n\n    return minGap;\n}\n\nexport function randomIntWithStep(min, max, step) {\n    let delta,\n        range,\n        rand;\n\n    if (arguments.length < 2) {\n        max = min;\n        min = 0;\n    }\n\n    if (!step) {\n        step = 1;\n    }\n\n    delta = max - min;\n    range = delta / step;\n    rand = Math.random();\n    rand *= range;\n    rand = Math.floor(rand);\n    rand *= step;\n    rand += min;\n\n    return rand;\n}\n\nexport function normalDistRandomInt(min, max) {\n    let normal = Math.abs((Prob.normal(0, 1)() + 3) / 6),\n        result = Math.floor((normal * (max - min)) + min);\n\n    if (result < min) result = min;\n    if (result > max) result = max;\n\n    return result;\n}\n\nexport function minStrLength(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function maxStrLength(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function minWordCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function maxWordCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function minSentenceCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function maxSentenceCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function minParagraphCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function maxParagraphCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function minDate(dateArray) {\n    return new Date(Math.min.apply(null, dateArray));\n}\n\nexport function maxDate(dateArray) {\n    return new Date(Math.max.apply(null, dateArray));\n}\n\nexport function convertStringDateArray(stringDateArray) {\n    let newArray = [],\n        dateString;\n\n    for (dateString of stringDateArray) {\n        newArray.push(new Date(dateString));\n    }\n\n    return newArray;\n}\n\nexport function capitalize(str) {\n    return str.replace(/(?:^|\\s)\\S/g, function (a) { return a.toUpperCase(); });\n};\n\nexport function isDateString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(str);\n}\n\nexport function isDatetimeString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function isTimeString(str) {\n    return /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function getWeights(allEntries, uniqueEntries) {\n    let weightedEntries = {},\n        weights = [],\n        entry;\n    \n    for (entry of allEntries) {\n        if (typeof weightedEntries[entry] === 'undefined') {\n            weightedEntries[entry] = 1;\n        } else {\n            weightedEntries[entry]++;\n        }\n    }\n\n    for (entry of uniqueEntries) {\n        weights.push(weightedEntries[entry]);\n    }\n\n    return weights;\n}\n\nexport function getNumberDirection(entries) {\n    let direction = null,\n        lastValue = null,\n        noDirection = false,\n        value;\n\n    for (value of entries) {\n        if (lastValue !== null && value > lastValue) {\n            if (direction === 'desc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'asc';\n        }\n        if (lastValue !== null && value < lastValue) {\n            if (direction === 'asc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'desc';\n        }\n        lastValue = value;\n    }\n\n    if (noDirection || direction === null) {\n        return false;\n    } else {\n        return direction;\n    }\n}\n\nexport function filterValue(value, filter) {\n    value = String(value);\n    let numValue = Number(value);\n\n    if (filter === 'slug') {\n        return slugify(value, { lower: true });\n    } else if (filter === 'lower') {\n        return value.toLowerCase();\n    } else if (filter === 'uppper') {\n        return value.toLowerCase();\n    } else if (filter === 'md5') {\n        return md5(value);\n    } else if (filter === 'capitalize') {\n        return capitalize(value);\n    } else if (filter === 'trim') {\n        return value.replace(/\\s/g, '');\n    } else if (filter === 'md') {\n        return marked(value);\n    } else if (numValue !== NaN && filter === 'round') {\n        return Math.round(value);\n    } else if (numValue !== NaN && filter === 'floor') {\n        return Math.floor(value);\n    } else if (numValue !== NaN && filter.substring(0, 4) === 'num:') {\n        let filterSplit = filter.split(':');\n        return numeral(numValue).format(filterSplit[1]);\n    } else if (filter === 'optional' && Math.random() >= 0.5) {\n        return '';\n    } else if (filter.substring(0, 5) === 'date:') {\n        let filterSplit = filter.split(':');\n        return format(new Date(value), filterSplit[1]);\n    } else {\n        return value;\n    }\n}\n\nexport function applyFilters(value, filters) {\n    let filtered = filterValue(value, filters[1]),\n        nr = 2;\n\n    while (filters.length > nr) {\n        filtered = filterValue(filtered, filters[nr]);\n        nr++;\n    }\n\n    return filtered;\n}\n\nexport function getFieldByPath(row, path, data) {\n    let found = false,\n        nextSteps = path.slice(0),\n        currentRow = row;\n\n    if (path.length === 0) {\n        return null;\n    }\n\n    while (!found) {\n        let nextStep = nextSteps.shift();\n\n        if (typeof currentRow[nextStep + '_id'] !== 'undefined') {\n            let item,\n                pluralNextStep = pluralize(nextStep);\n\n            if (typeof data[pluralNextStep] !== 'undefined') {\n                for (item in data[pluralNextStep]) {\n                    if (data[pluralNextStep][item]['id'] === currentRow[nextStep + '_id']) {\n                        currentRow = data[pluralNextStep][item];\n                    }\n                }\n            }\n        } else if (typeof currentRow[nextStep] !== 'undefined') {\n            if (typeof currentRow[nextStep][path[path.length - 1]] !== 'undefined') {\n                return currentRow[nextStep][path[path.length - 1]];\n            } else {\n                if (typeof currentRow[nextStep] !== 'object') {\n                    return currentRow[nextStep];\n                } else {\n                    return null;\n                }\n            }\n        } else {\n            return null;\n        }\n\n        if (nextSteps.length === 0) {\n            found = true;\n        }\n    }\n\n    return null;\n}\n\nexport function detectFieldType(fieldValue) {\n    let fieldType = 'undefined',\n        containsTemplate = false;\n\n    if (typeof fieldValue === 'boolean') {\n        fieldType = 'boolean';\n    } else if (typeof fieldValue === 'number') {\n        if (Math.round(fieldValue) === fieldValue) {\n            fieldType = 'int';\n        } else {\n            fieldType = 'float';\n        }\n    } else if (typeof fieldValue === 'string') {\n        if (isDateString(fieldValue)) {\n            fieldType = 'date';\n        } else if (isDatetimeString(fieldValue)) {\n            fieldType = 'datetime';\n        } else if (isTimeString(fieldValue)) {\n            fieldType = 'time';\n        } else if (fieldValue.length === 1) {\n            fieldType = 'char';\n        } else {\n            if (/{{\\s*([\\w\\.\\?\\|\\:]+)\\s*}}/.test(fieldValue)) {\n                containsTemplate = true;\n            }\n            fieldType = 'string';\n        }\n    } else if (typeof fieldValue === 'object') {\n        if (Array.isArray(fieldValue)) {\n            fieldType = 'array';\n        } else {\n            fieldType = 'JSON';\n        }\n    }\n\n    return {\n        fieldType: fieldType,\n        containsTemplate: containsTemplate\n    }\n}\n\nexport function renameProperty(obj, oldName, newName) {\n    if (oldName == newName) {\n        return obj;\n    }\n\n    if (obj.hasOwnProperty(oldName)) {\n        obj[newName] = obj[oldName];\n        delete obj[oldName];\n    }\n\n    return obj;\n}\n\nexport function getFieldRules(key, value, type, prevFields) {\n    let rules = [];\n\n    for (prevField of prevFields) {\n        if ((type === 'int' || type === 'float') && (prevField.type === 'int' || prevField.type === 'float')) {\n            if (value > prevField.value) {\n                rules.push(`${key}>${prevField.key}`);\n            } else if (value < prevField.value) {\n                rules.push(`${key}<${prevField.key}`);\n            } else {\n                rules.push(`${key}=${prevField.key}`);\n            }\n        } else if ((type === 'date' && prevField.type === 'date') || (type === 'datetime' && prevField.type === 'datetime')) {\n            let valueDate = new Date(value),\n                prevValueDate = new Date(prevField.value);\n\n            if (valueDate > prevValueDate) {\n                rules.push(`${key}>${prevField.key}`);\n            } else if (valueDate < prevValueDate) {\n                rules.push(`${key}<${prevField.key}`);\n            } else {\n                rules.push(`${key}=${prevField.key}`);\n            }\n        }\n    }\n\n    return rules;\n}\n\nexport function removeIncompatibleRules(rules) {\n    let filteredRules = [],\n        rule;\n\n    for (rule of rules) {\n        let ruleSplit = rule.split(/>|<|=/);\n        \n        if (rule.indexOf('<') > -1 && rules.indexOf(`${ruleSplit[0]}>${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}=${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n        if (rule.indexOf('>') > -1 && rules.indexOf(`${ruleSplit[0]}<${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}=${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n        if (rule.indexOf('=') > -1 && rules.indexOf(`${ruleSplit[0]}>${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}<${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n    }\n\n    return filteredRules;\n}\n\nexport function rulesAreValid(value, rules, row, type) {\n    if (rules.length === 0) return true;\n    if (value === '') return false;\n\n    let rule;\n\n    for (rule of rules) {\n        let ruleSplit = rule.split(/>|<|=/);\n\n        if (typeof row[ruleSplit[1]] !== 'undefined' && row[ruleSplit[1]] !== '') {\n            if (type === 'int' || type === 'float') {\n                if (rule.indexOf('<') > -1 && value >= row[ruleSplit[1]]) {\n                    return false;\n                }\n                if (rule.indexOf('>') > -1 && value <= row[ruleSplit[1]]) {\n                    return false;\n                }\n                if (rule.indexOf('=') > -1 && value !== row[ruleSplit[1]]) {\n                    return false;\n                }\n            } else if (type === 'date' || type === 'datetime') {\n                let valueDate = new Date(value),\n                    rowValueDate = new Date(row[ruleSplit[1]]);\n\n                if (rule.indexOf('<') > -1 && valueDate >= rowValueDate) {\n                    return false;\n                }\n                if (rule.indexOf('>') > -1 && valueDate <= rowValueDate) {\n                    return false;\n                }\n                if (rule.indexOf('=') > -1 && valueDate !== rowValueDate) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}","import _ from 'lodash';\nimport Chance from 'chance';\nimport faker from 'faker';\nimport stringify from 'json-stringify-pretty-compact';\n\nimport {\n    sentence,\n    paragraph,\n    article,\n    addTemplates,\n    generator\n} from './txtgen/main'; // Extended version of the Txtgen library. Original at: https://github.com/ndaidong/txtgen\n\nimport {\n    randomTime,\n    randomDate,\n    randomDatetime,\n    findGap,\n    getMaxPrecision,\n    everythingCapitalized,\n    minNumber,\n    maxNumber,\n    minGapOfIntArray,\n    randomIntWithStep,\n    minStrLength,\n    maxStrLength,\n    minWordCount,\n    maxWordCount,\n    minSentenceCount,\n    maxSentenceCount,\n    minParagraphCount,\n    maxParagraphCount,\n    minDate,\n    maxDate,\n    convertStringDateArray,\n    capitalize,\n    isDateString,\n    isDatetimeString,\n    isTimeString,\n    getWeights,\n    getNumberDirection,\n    filterValue,\n    applyFilters,\n    getFieldByPath,\n    detectFieldType,\n    normalDistRandomInt,\n    renameProperty,\n    getFieldRules,\n    removeIncompatibleRules,\n    rulesAreValid\n} from './helpers';\n\nconst chance = new Chance();\n\naddTemplates([\n    'congratulations to the {{noun}} that won the {{adjective}} {{noun}} with {{a_noun}}',\n    'incomprehensibilities of a {{adjective}} {{noun}} and {{a_noun}} made {{a_noun}} {{adjective}}'\n]);\n\nmodule.exports = function blowson(inputData) {\n    let dataIsJSON = false,\n        data = {},\n        types = [],\n        type,\n        row,\n        field,\n        entry,\n        customKeyNames = {},\n        tempKeys = [];\n\n    if (typeof data === 'string') {\n        data = JSON.parse(inputData);\n        dataIsJSON = true;\n    } else {\n        data = inputData;\n    }\n\n    for (type in data) {\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                let fieldSplit = field.split('__');\n\n                if (field.substr(0, 2) === '__') {\n                    tempKeys.push(`${type}.${field.substr(2)}`);\n                    renameProperty(data[type][entry], field, field.substr(2));\n                    continue;\n                }\n\n                if (fieldSplit.length > 1) {\n                    customKeyNames[`${type}.${fieldSplit[1]}`] = `${type}.${fieldSplit[0]}`;\n                    renameProperty(data[type][entry], field, fieldSplit[1]);\n                }\n            }\n        }\n    }\n\n    for (type in data) {\n        let typeDef = {\n                key: type,\n                minID: 1,\n                maxID: 1,\n                totalCount: 0,\n                fields: {}\n            };\n\n        for (entry in data[type]) {\n            let prevFields = [];\n\n            for (field in data[type][entry]) {\n                let fieldValue = data[type][entry][field],\n                    { fieldType, containsTemplate } = detectFieldType(fieldValue);\n\n                if (typeof typeDef.fields[field] === 'undefined') {\n                    typeDef.fields[field] = {\n                        types: [fieldType],\n                        entries: [fieldValue],\n                        allEntries: [fieldValue],\n                        containsTemplate: containsTemplate,\n                        rules: [],\n                        cnt: 1\n                    };\n                } else {\n                    typeDef.fields[field].types.push(fieldType);\n                    typeDef.fields[field].types = _.uniq(typeDef.fields[field].types);\n                    typeDef.fields[field].entries.push(fieldValue);\n                    typeDef.fields[field].entries = _.uniq(typeDef.fields[field].entries);\n                    typeDef.fields[field].allEntries.push(fieldValue);\n                    typeDef.fields[field].cnt++;\n                    if (containsTemplate) {\n                        typeDef.fields[field].containsTemplate = true;\n                    }\n                }\n\n                if (fieldType === 'JSON') {\n                    let objField;\n\n                    for (objField in fieldValue) {\n                        let objFieldValue = fieldValue[objField],\n                            result = detectFieldType(objFieldValue),\n                            objFieldType = result.fieldType,\n                            objContainsTemplate = result.containsTemplate;\n\n                        if (typeof typeDef.fields[field + '.' + objField] === 'undefined') {\n                            typeDef.fields[field + '.' + objField] = {\n                                types: [objFieldType],\n                                entries: [objFieldValue],\n                                allEntries: [objFieldValue],\n                                containsTemplate: objContainsTemplate,\n                                cnt: 1\n                            };\n                        } else {\n                            typeDef.fields[field + '.' + objField].types.push(objFieldType);\n                            typeDef.fields[field + '.' + objField].types = _.uniq(typeDef.fields[field + '.' + objField].types);\n                            typeDef.fields[field + '.' + objField].entries.push(objFieldValue);\n                            typeDef.fields[field + '.' + objField].entries = _.uniq(typeDef.fields[field + '.' + objField].entries);\n                            typeDef.fields[field + '.' + objField].allEntries.push(objFieldValue);\n                            typeDef.fields[field + '.' + objField].cnt++;\n                            if (objContainsTemplate) {\n                                typeDef.fields[field + '.' + objField].objContainsTemplate = true;\n                            }\n                        }\n                    }\n                }\n\n                if (prevFields.length > 0 && field !== 'id' && !field.endsWith('_id') && !field.endsWith('_ids')) {\n                    let rules = getFieldRules(field, fieldValue, fieldType, prevFields);\n                    \n                    if (rules.length > 0) {\n                        typeDef.fields[field].rules = typeDef.fields[field].rules.concat(rules);\n                    }\n                }\n\n                if (field !== 'id' && !field.endsWith('_id') && !field.endsWith('_ids')) {\n                    prevFields.push({\n                        key: field,\n                        value: fieldValue,\n                        type: fieldType\n                    });\n                }\n            }\n        }\n\n        for (field in typeDef.fields) {\n            if (field === 'id') {\n                typeDef.totalCount = typeDef.fields[field].cnt;\n            }\n            if (typeDef.fields[field].types.length === 1) {\n                typeDef.fields[field].type = typeDef.fields[field].types[0];\n            } else {\n                if (typeDef.fields[field].types.length == 2 && typeDef.fields[field].types.indexOf('int') > -1 && typeDef.fields[field].types.indexOf('float') > -1) {\n                    typeDef.fields[field].type = 'float';\n                } else {\n                    typeDef.fields[field].type = 'string';\n                }\n            }\n            if (typeDef.fields[field].entries.length < typeDef.fields[field].cnt || typeDef.fields[field].containsTemplate) {\n                typeDef.fields[field].repeatEntries = true;\n                typeDef.fields[field].weights = getWeights(typeDef.fields[field].allEntries, typeDef.fields[field].entries);\n            } else {\n                typeDef.fields[field].repeatEntries = false;\n            }\n            if (typeDef.fields[field].cnt < typeDef.totalCount) {\n                typeDef.fields[field].required = false;\n            } else {\n                typeDef.fields[field].required = true;\n            }\n            typeDef.fields[field].rules = removeIncompatibleRules(_.uniq(typeDef.fields[field].rules));       \n        }\n\n        typeDef.gap = findGap(typeDef.fields['id'].entries);\n\n        types.push(typeDef);\n    }\n\n    for (type in types) {\n        let settings = types[type];\n\n        if (settings.gap) {\n            let id,\n                field;\n\n            for (id = settings.gap.start; id <= settings.gap.end; id++) {\n                let row = {};\n\n                for (field in settings.fields) {\n                    let value = '';\n\n                    if (settings.fields[field].repeatEntries || settings.fields[field].containsTemplate) {\n                        value = chance.weighted(settings.fields[field].entries, settings.fields[field].weights);\n                    } else {\n\n                        if (field === 'id') value = id;\n                        if ((field === 'age' || field.endsWith('.age')) && settings.fields[field].type === 'int') value = chance.age();\n                        if ((field === 'firstname' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.first();\n                        if ((field === 'lastname' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.last();\n                        if ((field === 'company' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.company();\n                        if ((field === 'country' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.country();\n                        if ((field === 'email' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.internet.exampleEmail();\n                        if ((field === 'color' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.color();\n                        if ((field === 'ip' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.ip();\n                        if ((field === 'profession' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.profession();\n                        if ((field === 'url' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.url();\n                        if ((field === 'city' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.city();\n                        if ((field === 'street' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.street();\n                        if ((field === 'zip' || field.endsWith('.age')) && settings.fields[field].type === 'int') value = parseInt(chance.zip());\n                        if ((field === 'weekday' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.weekday();\n                        if ((field === 'year' || field.endsWith('.age')) && settings.fields[field].type === 'int') value = parseInt(chance.year());\n                        if ((field === 'password' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.hash();\n                        if ((field === 'guid' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = chance.guid();\n                        if ((field === 'product' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.commerce.productName();\n                        if ((field === 'material' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.commerce.productMaterial();\n                        if ((field === 'iban' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.finance.iban();\n                        if ((field === 'bic' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.finance.bic();\n                        if ((field === 'avatar' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.image.avatar();\n                        if ((field === 'username' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.internet.userName();\n                        if ((field === 'homepage' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.internet.url();\n                        if ((field === 'job' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.name.jobTitle();\n                        if ((field === 'mimetype' || field.endsWith('.age')) && settings.fields[field].type === 'string') value = faker.system.mimeType();\n\n                        if (value === '' && settings.fields[field].type === 'JSON') {\n                            value = {};\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'array') {\n                            let min = null, \n                                max = null, \n                                maxCount = 0;\n\n                            for (arrEntry of settings.fields[field].entries) {\n                                let arrMin = minNumber(arrEntry),\n                                    arrMax = maxNumber(arrEntry),\n                                    arrCount = arrEntry.length;\n                                \n                                if (arrCount > 0 && (min === null || arrMin < min)) {\n                                    min = arrMin;\n                                }\n                                if (arrCount > 0 && (max === null || arrMax > max)) {\n                                    max = arrMax;\n                                }\n                                if (arrCount > maxCount) {\n                                    maxCount = arrCount;\n                                }\n                            }\n\n                            value = Array.from({ length: Math.floor(Math.random() * maxCount) + 1 }, () => randomIntWithStep(min, max, 1));\n                            value.sort(function (a, b) {\n                                return a - b;\n                            });\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'string') {\n                            let minLength = minStrLength(settings.fields[field].entries),\n                                maxLength = maxStrLength(settings.fields[field].entries),\n                                minWords = minWordCount(settings.fields[field].entries),\n                                maxWords = maxWordCount(settings.fields[field].entries),\n                                minSentences = minSentenceCount(settings.fields[field].entries),\n                                maxSentences = maxSentenceCount(settings.fields[field].entries),\n                                minParagraphs = minParagraphCount(settings.fields[field].entries),\n                                maxParagraphs = maxParagraphCount(settings.fields[field].entries);\n\n                            if (maxParagraphs > 1) {\n                                value = article(Math.floor(Math.random() * maxParagraphs) + minParagraphs);\n                            } else if (maxSentences > 1) {\n                                value = paragraph(Math.floor(Math.random() * maxSentences) + minSentences);\n                            } else if (maxWords > 1) {\n                                value = chance.sentence({ words: Math.floor(Math.random() * maxWords) + minWords }).slice(0, -1);\n                            } else {\n                                if (settings.fields[field].entries[0][0].toUpperCase() === settings.fields[field].entries[0][0]) {\n                                    value = chance.capitalize(chance.word({ length: Math.floor(Math.random() * minLength) + maxLength }));\n                                } else {\n                                    value = chance.string({ length: Math.floor(Math.random() * minLength) + maxLength });\n                                }\n                            }\n\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = value.toUpperCase();\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = value.toLowerCase();\n                            } else if (everythingCapitalized(settings.fields[field].entries)) {\n                                value = capitalize(value);\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'int') {\n                            let minInt = minNumber(settings.fields[field].entries),\n                                maxInt = maxNumber(settings.fields[field].entries),\n                                minGap = minGapOfIntArray(settings.fields[field].entries),\n                                cnt = 0;\n\n                            if (field.endsWith('_id')) {\n                                value = normalDistRandomInt(minInt, maxInt);\n                            } else {\n                                while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                    value = randomIntWithStep(minInt, maxInt, minGap);\n                                    cnt++;\n                                }\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'float') {\n                            let minFloat = minNumber(settings.fields[field].entries),\n                                maxFloat = maxNumber(settings.fields[field].entries),\n                                maxPrecision = getMaxPrecision(settings.fields[field].entries),\n                                cnt = 0;\n\n                            while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                value = Number(chance.floating({ min: minFloat, max: maxFloat }).toFixed(maxPrecision));\n                                cnt++;\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'char') {\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = chance.letter({ casing: 'upper' });\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = chance.letter({ casing: 'lower' });\n                            } else {\n                                value = chance.letter();\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'date') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries)),\n                                cnt = 0;\n\n                            while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                value = randomDate(minDateDate, maxDateDate);\n                                cnt++;\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'datetime') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries)),\n                                cnt = 0;\n\n                            while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                value = randomDatetime(minDateDate, maxDateDate);\n                                cnt++;\n                            }\n\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'time') {\n                            value = randomTime();\n                        }\n\n                    }\n\n                    if (settings.fields[field].required || Math.random() >= 0.5) {\n                        if (field.indexOf('.') > -1) {\n                            let fieldSplit = field.split('.');\n\n                            if (typeof row[fieldSplit[0]] !== 'undefined') {\n                                row[fieldSplit[0]][fieldSplit[1]] = value;\n                            }\n                        } else {\n                            row[field] = value;\n                        }\n                    }\n                }\n\n                data[settings.key].push(row);\n            }\n\n        }\n\n    }\n\n    // Replace template variables:\n    for (type in data) {\n        for (row in data[type]) {\n            for (field in data[type][row]) {\n                let value = data[type][row][field];\n\n                if (typeof value === 'string') {\n                    data[type][row][field] = value.replace(/{{\\s*([\\w\\.\\?\\|\\:]+)\\s*}}/g, function (match, capture) {\n                        let defaultParts = capture.split('?'),\n                            filterParts = defaultParts[0].split('|'),\n                            parts = filterParts[0].split('.');\n\n                        if (parts[0] === 'number' && parts.length === 1) {\n                            return Math.floor(Math.random() * 10);\n                        } else if (parts[0] === 'sentence' && parts.length === 1) {\n                            return sentence();\n                        } else if (parts[0] === 'paragraph' && parts.length === 1) {\n                            return paragraph();\n                        } else if (parts[0] === 'word' && parts.length === 2) {\n                            if (typeof generator[parts[1]] !== 'undefined') {\n                                if (filterParts.length > 1) {\n                                    return applyFilters(generator[parts[1]](), filterParts);\n                                } else {\n                                    return generator[parts[1]]();\n                                }\n                            }\n                        } else if (parts[0] === 'field' && parts.length === 2 && typeof data[type][row][parts[1]] !== 'undefined') {\n                            if (filterParts.length > 1) {\n                                return applyFilters(data[type][row][parts[1]], filterParts);\n                            } else {\n                                return data[type][row][parts[1]];\n                            }\n                        } else if (parts[0] === 'field' && parts.length > 2) {\n                            let path = parts.slice(1),\n                                value = getFieldByPath(data[type][row], path, data);\n\n                            if (value !== null) {\n                                if (filterParts.length > 1) {\n                                    return applyFilters(value, filterParts);\n                                } else {\n                                    return value;\n                                }\n                            }\n\n                            if (defaultParts.length > 1) {\n                                return defaultParts[1];\n                            }\n                        } else if (defaultParts.length > 1) {\n                            return defaultParts[1];\n                        }\n\n                        return match;\n                    });\n\n                    data[type][row][field] = data[type][row][field].replace(/  +/g, ' ');\n                }\n            }\n        }\n    }\n\n    for (type in data) {\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                if (tempKeys.indexOf(`${type}.${field}`) > -1) {\n                    delete (data[type][entry][field]);\n                }\n                if (typeof customKeyNames[`${type}.${field}`] !== 'undefined') {\n                    renameProperty(data[type][entry], field, customKeyNames[`${type}.${field}`].split('.')[1]);\n                }\n            }\n        }\n    }\n\n    if (dataIsJSON) {\n        return stringify(data);\n    }\n\n    return data;\n}"],"names":["const","random","min","max","let","offset","range","Math","floor","rand","a","w","length","pluralize","word","endsWith","match","vowels","includes","charAt","slice","normalize","nouns","adjectives","sentenceTemplates","phrases","actions","generator","noun","a_noun","adjective","an_adjective","makeSentenceFromTemplate","template","sentence","occurrences","i","action","replace","result","make","s","toUpperCase","split","paragraph","len","t","push","join","article","chance","Chance","randomDatetime","start","end","d","Date","getTime","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","findGap","numArray","apply","missingNums","indexOf","floatPrecision","isFinite","e","p","round","getMaxPrecision","floatArray","maxPrecision","precision","everythingCapitalized","stringArray","str","isCapitalized","capitalize","minNumber","intArray","maxNumber","minGapOfIntArray","value1","value2","minGap","abs","randomIntWithStep","step","arguments","normalDistRandomInt","normal","Prob","maxStrLength","strArray","map","minWordCount","maxWordCount","minSentenceCount","maxSentenceCount","minParagraphCount","maxParagraphCount","minDate","dateArray","maxDate","convertStringDateArray","stringDateArray","newArray","getWeights","allEntries","uniqueEntries","entry","weightedEntries","weights","filterValue","value","filter","String","numValue","Number","slugify","lower","toLowerCase","md5","marked","NaN","substring","filterSplit","numeral","format","applyFilters","filters","filtered","nr","getFieldByPath","row","path","data","found","nextSteps","currentRow","nextStep","shift","item","pluralNextStep","detectFieldType","fieldValue","fieldType","containsTemplate","test","isDatetimeString","isTimeString","Array","isArray","renameProperty","obj","oldName","newName","hasOwnProperty","getFieldRules","key","type","prevFields","rules","prevField","valueDate","prevValueDate","removeIncompatibleRules","rule","filteredRules","ruleSplit","rulesAreValid","rowValueDate","concat","r","unique","module","exports","inputData","field","dataIsJSON","types","customKeyNames","tempKeys","JSON","parse","fieldSplit","substr","typeDef","minID","maxID","totalCount","fields","entries","cnt","_","uniq","objField","objFieldValue","objFieldType","objContainsTemplate","repeatEntries","required","gap","settings","id","weighted","age","first","last","company","country","faker","internet","exampleEmail","color","ip","profession","url","city","street","parseInt","zip","weekday","hash","guid","commerce","productName","productMaterial","finance","iban","bic","image","avatar","userName","name","jobTitle","system","mimeType","maxCount","arrEntry","arrMin","arrMax","arrCount","from","sort","b","minLength","maxLength","minWords","maxWords","minSentences","maxSentences","minParagraphs","maxParagraphs","words","string","minInt","maxInt","minFloat","maxFloat","floating","toFixed","letter","casing","minDateDate","maxDateDate","hour","twentyfour","minute","second","capture","defaultParts","filterParts","parts","stringify"],"mappings":"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"}