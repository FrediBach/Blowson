{"version":3,"file":"blowson.m.js","sources":["../src/txtgen/util.js","../src/txtgen/sample.js","../src/txtgen/main.js","../src/helpers.js","../src/blowson.js"],"sourcesContent":["// utils\n\nimport {\n  vowels,\n} from './sample';\n\nexport const unique = (a) => {\n  let r = [];\n  for (let i = 0; i < a.length; i++) {\n    if (r.indexOf(a[i]) === -1) {\n      r.push(a[i]);\n    }\n  }\n  return r;\n};\n\nexport const random = (min, max) => {\n  let offset = min;\n  let range = max - min + 1;\n  let rd = Math.floor(Math.random() * range) + offset;\n  return rd;\n};\n\nexport const rand = (a) => {\n  let w;\n  while (!w) {\n    w = a[random(0, a.length - 1)];\n  }\n  return w;\n};\n\nexport const pickLastPunc = () => {\n  let a = '.......!?!?;...'.split('');\n  return rand(a);\n};\n\nexport const pluralize = (word) => {\n  if (word.endsWith('s')) {\n    return word;\n  }\n  if (word.match(/(ss|ish|ch|x|us)$/)) {\n    word += 'e';\n  } else if (word.endsWith('y') && !vowels.includes(word.charAt(word.length - 2))) {\n    word = word.slice(0, word.length - 1);\n    word += 'ie';\n  }\n  return word + 's';\n};\n\nexport const normalize = (word) => {\n  let a = 'a';\n  if (word.match(/^(a|e|i|o)/)) {\n    a = 'an';\n  }\n  return `${a} ${word}`;\n};\n","// samples\n\nimport {\n  unique,\n} from './util';\n\n/* eslint-disable */\nexport var nouns = [ 'alligator', 'ant', 'bear', 'bee', 'bird', 'camel', 'cat', 'cheetah', 'chicken', 'chimpanzee', 'cow', 'crocodile', 'deer', 'dog', 'dolphin', 'duck', 'eagle', 'elephant', 'fish', 'fly', 'fox', 'frog', 'giraffe', 'goat', 'goldfish', 'hamster', 'hippopotamus', 'horse', 'kangaroo', 'kitten', 'lion', 'lobster', 'monkey', 'octopus', 'owl', 'panda', 'pig', 'puppy', 'rabbit', 'rat', 'scorpion', 'seal', 'shark', 'sheep', 'snail', 'snake', 'spider', 'squirrel', 'tiger', 'turtle', 'wolf', 'zebra', 'apple', 'apricot', 'banana', 'blackberry', 'blueberry', 'cherry', 'cranberry', 'currant', 'fig', 'grape', 'grapefruit', 'grapes', 'kiwi', 'kumquat', 'lemon', 'lime', 'melon', 'nectarine', 'orange', 'peach', 'pear', 'persimmon', 'pineapple', 'plum', 'pomegranate', 'prune', 'raspberry', 'strawberry', 'tangerine', 'watermelon' ];\nexport var adjectives = [ 'adaptable', 'adventurous', 'affable', 'affectionate', 'agreeable', 'alert', 'alluring', 'ambitious', 'ambitious', 'amiable', 'amicable', 'amused', 'amusing', 'boundless', 'brave', 'brave', 'bright', 'bright', 'broad-minded', 'calm', 'calm', 'capable', 'careful', 'charming', 'charming', 'cheerful', 'coherent', 'comfortable', 'communicative', 'compassionate', 'confident', 'conscientious', 'considerate', 'convivial', 'cooperative', 'courageous', 'courageous', 'courteous', 'creative', 'credible', 'cultured', 'dashing', 'dazzling', 'debonair', 'decisive', 'decisive', 'decorous', 'delightful', 'detailed', 'determined', 'determined', 'diligent', 'diligent', 'diplomatic', 'discreet', 'discreet', 'dynamic', 'dynamic', 'eager', 'easygoing', 'efficient', 'elated', 'eminent', 'emotional', 'enchanting', 'encouraging', 'endurable', 'energetic', 'energetic', 'entertaining', 'enthusiastic', 'enthusiastic', 'excellent', 'excited', 'exclusive', 'exuberant', 'exuberant', 'fabulous', 'fair', 'fair-minded', 'faithful', 'faithful', 'fantastic', 'fearless', 'fearless', 'fine', 'forceful', 'frank', 'frank', 'friendly', 'friendly', 'funny', 'funny', 'generous', 'generous', 'gentle', 'gentle', 'glorious', 'good', 'good', 'gregarious', 'happy', 'hard-working', 'harmonious', 'helpful', 'helpful', 'hilarious', 'honest', 'honorable', 'humorous', 'imaginative', 'impartial', 'impartial', 'independent', 'industrious', 'instinctive', 'intellectual', 'intelligent', 'intuitive', 'inventive', 'jolly', 'joyous', 'kind', 'kind', 'kind-hearted', 'knowledgeable', 'level', 'likeable', 'lively', 'lovely', 'loving', 'loving', 'loyal', 'lucky', 'mature', 'modern', 'modest', 'neat', 'nice', 'nice', 'obedient', 'optimistic', 'painstaking', 'passionate', 'patient', 'peaceful', 'perfect', 'persistent', 'philosophical', 'pioneering', 'placid', 'placid', 'plausible', 'pleasant', 'plucky', 'plucky', 'polite', 'powerful', 'practical', 'pro-active', 'productive', 'protective', 'proud', 'punctual', 'quick-witted', 'quiet', 'quiet', 'rational', 'receptive', 'reflective', 'reliable', 'relieved', 'reserved', 'resolute', 'resourceful', 'responsible', 'rhetorical', 'righteous', 'romantic', 'romantic', 'sedate', 'seemly', 'selective', 'self-assured', 'self-confident', 'self-disciplined', 'sensible', 'sensitive', 'sensitive', 'shrewd', 'shy', 'silly', 'sincere', 'sincere', 'skillful', 'smiling', 'sociable', 'splendid', 'steadfast', 'stimulating', 'straightforward', 'successful', 'succinct', 'sympathetic', 'talented', 'thoughtful', 'thoughtful', 'thrifty', 'tidy', 'tough', 'tough', 'trustworthy', 'unassuming', 'unbiased', 'understanding', 'unusual', 'upbeat', 'versatile', 'vigorous', 'vivacious', 'warm', 'warmhearted', 'willing', 'willing', 'wise', 'witty', 'witty', 'wonderful' ];\n\nexport var vowels = [\n  'a', 'e', 'i', 'o', 'u', 'y'\n];\n\nexport var sentenceTemplates = [\n  'the {{noun}} is {{a_noun}}',\n  '{{a_noun}} is {{an_adjective}} {{noun}}',\n  'the first {{adjective}} {{noun}} is, in its own way, {{a_noun}}',\n  'their {{noun}} was, in this moment, {{an_adjective}} {{noun}}',\n  '{{a_noun}} is {{a_noun}} from the right perspective',\n  'the literature would have us believe that {{an_adjective}} {{noun}} is not but {{a_noun}}',\n  '{{an_adjective}} {{noun}} is {{a_noun}} of the mind',\n  'the {{adjective}} {{noun}} reveals itself as {{an_adjective}} {{noun}} to those who look',\n  'authors often misinterpret the {{noun}} as {{an_adjective}} {{noun}}, when in actuality it feels more like {{an_adjective}} {{noun}}',\n  'we can assume that any instance of {{a_noun}} can be construed as {{an_adjective}} {{noun}}',\n  'they were lost without the {{adjective}} {{noun}} that composed their {{noun}}',\n  'the {{adjective}} {{noun}} comes from {{an_adjective}} {{noun}}',\n  '{{a_noun}} can hardly be considered {{an_adjective}} {{noun}} without also being {{a_noun}}',\n  'few can name {{an_adjective}} {{noun}} that isn\\'t {{an_adjective}} {{noun}}',\n  'some posit the {{adjective}} {{noun}} to be less than {{adjective}}',\n  '{{a_noun}} of the {{noun}} is assumed to be {{an_adjective}} {{noun}}',\n  '{{a_noun}} sees {{a_noun}} as {{an_adjective}} {{noun}}',\n  'the {{noun}} of {{a_noun}} becomes {{an_adjective}} {{noun}}',\n  '{{a_noun}} is {{a_noun}}\\'s {{noun}}',\n  '{{a_noun}} is the {{noun}} of {{a_noun}}',\n  '{{an_adjective}} {{noun}}\\'s {{noun}} comes with it the thought that the {{adjective}} {{noun}} is {{a_noun}}',\n  '{{nouns}} are {{adjective}} {{nouns}}',\n  '{{adjective}} {{nouns}} show us how {{nouns}} can be {{nouns}}',\n  'before {{nouns}}, {{nouns}} were only {{nouns}}',\n  'those {{nouns}} are nothing more than {{nouns}}',\n  'some {{adjective}} {{nouns}} are thought of simply as {{nouns}}',\n  'one cannot separate {{nouns}} from {{adjective}} {{nouns}}',\n  'the {{nouns}} could be said to resemble {{adjective}} {{nouns}}',\n  '{{an_adjective}} {{noun}} without {{nouns}} is truly a {{noun}} of {{adjective}} {{nouns}}'\n];\n\nexport var phrases = [\n  'to be more specific, ',\n  'in recent years, ',\n  'however, ',\n  'by the way',\n  'of course, ',\n  'some assert that ',\n  'if this was somewhat unclear, ',\n  'unfortunately, that is wrong; on the contrary, ',\n  'it\\'s very tricky, if not impossible, ',\n  'this could be, or perhaps ',\n  'this is not to discredit the idea that ',\n  'we know that ',\n  'it\\'s an undeniable fact, really; ',\n  'framed in a different way, ',\n  'what we don\\'t know for sure is whether or not ',\n  'as far as we can estimate, ',\n  'as far as he is concerned, ',\n  'the zeitgeist contends that ',\n  'though we assume the latter, ',\n  'far from the truth, ',\n  'extending this logic, ',\n  'nowhere is it disputed that ',\n  'in modern times ',\n  'in ancient times ',\n  'recent controversy aside, ',\n  'washing and polishing the car,',\n  'having been a gymnast, ',\n  'after a long day at school and work, ',\n  'waking to the buzz of the alarm clock, ',\n  'draped neatly on a hanger, ',\n  'shouting with happiness, '\n];\n/* eslint-enable */\n\nexport const addNouns = (ls = []) => {\n  let a = nouns.concat(ls);\n  nouns = unique(a);\n  return nouns.length;\n};\n\nexport const addAdjectives = (ls) => {\n  let a = adjectives.concat(ls);\n  adjectives = unique(a);\n  return adjectives.length;\n};\n\nexport const addTemplates = (ls) => {\n  let a = sentenceTemplates.concat(ls);\n  sentenceTemplates = unique(a);\n  return sentenceTemplates.length;\n};\n\n","/**\n * txtgen\n * @ndaidong\n**/\n\nimport {\n  nouns,\n  adjectives,\n  sentenceTemplates,\n  phrases,\n} from './sample';\n\nimport {\n  random,\n  rand,\n  pickLastPunc,\n  pluralize,\n  normalize,\n} from './util';\n\nexport {\n  addNouns,\n  addAdjectives,\n  addTemplates,\n} from './sample';\n\nlet actions = [\n  'noun', 'a_noun', 'nouns',\n  'adjective', 'an_adjective',\n];\n\nexport const generator = {\n  noun: () => {\n    return rand(nouns);\n  },\n  a_noun: () => { // eslint-disable-line camelcase\n    return normalize(rand(nouns));\n  },\n  nouns: () => {\n    return pluralize(rand(nouns));\n  },\n  adjective: () => {\n    return rand(adjectives);\n  },\n  an_adjective: () => { // eslint-disable-line camelcase\n    return normalize(rand(adjectives));\n  },\n};\n\nconst trim = (s) => {\n  return s.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '')\n    .replace(/\\r?\\n|\\r/g, ' ')\n    .replace(/\\s\\s+|\\r/g, ' ');\n};\n\nconst make = (template) => {\n  let sentence = template;\n  let occurrences = template.match(/\\{\\{(.+?)\\}\\}/g);\n\n  if (occurrences && occurrences.length) {\n    for (let i = 0; i < occurrences.length; i++) {\n      let action = trim(occurrences[i].replace('{{', '').replace('}}', ''));\n      let result;\n      if (actions.includes(action)) {\n        result = generator[action]();\n      }\n      sentence = sentence.replace(occurrences[i], result);\n    }\n  }\n  return sentence;\n};\n\nconst randomStartingPhrase = () => {\n  if (Math.random() < 0.33) {\n    return rand(phrases);\n  }\n  return '';\n};\n\nconst makeSentenceFromTemplate = () => {\n  return make(rand(sentenceTemplates));\n};\n\nexport const sentence = () => {\n  let phrase = randomStartingPhrase();\n  let s = phrase + makeSentenceFromTemplate();\n  s = s.charAt(0).toUpperCase() + s.slice(1);\n  s += pickLastPunc();\n  if (Math.random() >= 0.9) {\n    let quotationEntries = [\n      'He said',\n      'She said',\n      'In his own words',\n      'In her own words',\n      'Yelling',\n      'Wispering',\n      'Quoting with intend'\n    ];\n    s = `${rand(quotationEntries)}: \"${s}\"`;\n  }\n  return s;\n};\n\nexport const paragraph = (len = 0) => {\n  if (!len) {\n    len = random(3, 10);\n  }\n  let t = Math.min(len, 15);\n  let a = [];\n  while (a.length < t) {\n    let s = sentence();\n    a.push(s);\n  }\n  return a.join(' ');\n};\n\nexport const article = (len = 0) => {\n  if (!len) {\n    len = random(3, 10);\n  }\n  let t = Math.min(len, 15);\n  let a = [];\n  while (a.length < t) {\n    let s = paragraph();\n    a.push(s);\n  }\n  return a.join('\\n\\n');\n};\n","import _ from 'lodash';\nimport Chance from 'chance';\nimport slugify from 'slugify';\nimport md5 from 'md5';\nimport {format} from 'date-fns';\nimport numeral from 'numeral';\nimport marked from 'marked';\nimport Prob from 'prob.js';\nimport {pluralize} from './txtgen/util';\n\nconst chance = new Chance();\n\nexport function randomTime() {\n    let hours = String(chance.hour({ twentyfour: true })),\n        minutes = String(chance.minute()),\n        seconds = String(chance.second());\n\n    if (hours.length === 1) '0' + hours;\n    if (minutes.length === 1) '0' + minutes;\n    if (seconds.length === 1) '0' + seconds;\n\n    return [hours, minutes, seconds].join(':');\n}\n\nexport function randomDate(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n}\n\nexport function randomDatetime(start, end) {\n    var d = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear(),\n        hours = '' + d.getHours(),\n        minutes = '' + d.getMinutes(),\n        seconds = '' + d.getSeconds();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    if (hours.length < 2) hours = '0' + hours;\n    if (minutes.length < 2) minutes = '0' + minutes;\n    if (seconds.length < 2) seconds = '0' + seconds;\n\n    return [year, month, day].join('-') + 'T' + [hours, minutes, seconds].join(':') + '+01:00';\n}\n\nexport function findGap(numArray) {\n    let min = Math.min.apply(Math, numArray),\n        max = Math.max.apply(Math, numArray),\n        missingNums = [],\n        i;\n\n    for (i = min; i <= max; i++) {\n        if (numArray.indexOf(i) == -1) {\n            missingNums.push(i);\n        }\n    }\n\n    if (missingNums.length > 0) {\n        return {\n            start: Math.min.apply(Math, missingNums),\n            end: Math.max.apply(Math, missingNums)\n        };\n    } else {\n        return false;\n    }\n}\n\nexport function floatPrecision(a) {\n    if (!isFinite(a)) return 0;\n\n    var e = 1, p = 0;\n\n    while (Math.round(a * e) / e !== a) {\n        e *= 10; p++;\n    }\n\n    return p;\n}\n\nexport function getMaxPrecision(floatArray) {\n    let maxPrecision = 0,\n        value;\n\n    for (value of floatArray) {\n        let precision = floatPrecision(value);\n\n        if (precision > maxPrecision) {\n            maxPrecision = precision;\n        }\n    }\n\n    return maxPrecision;\n}\n\nexport function everythingCapitalized(stringArray) {\n    let isCapitalized = true,\n        str;\n\n    for (str of stringArray) {\n        if (capitalize(str) !== str) {\n            isCapitalized = false;\n            break;\n        }\n    }\n\n    return isCapitalized;\n}\n\nexport function minNumber(intArray) {\n    return Math.min.apply(Math, intArray);\n}\n\nexport function maxNumber(intArray) {\n    return Math.max.apply(Math, intArray);\n}\n\nexport function minGapOfIntArray(intArray) {\n    let minGap = 999999999,\n        value1,\n        value2;\n\n    for (value1 of intArray) {\n        for (value2 of intArray) {\n            if (value1 !== value2 && Math.abs(value1 - value2) < minGap) {\n                minGap = Math.abs(value1 - value2);\n            }\n        }\n    }\n\n    return minGap;\n}\n\nexport function randomIntWithStep(min, max, step) {\n    let delta,\n        range,\n        rand;\n\n    if (arguments.length < 2) {\n        max = min;\n        min = 0;\n    }\n\n    if (!step) {\n        step = 1;\n    }\n\n    delta = max - min;\n    range = delta / step;\n    rand = Math.random();\n    rand *= range;\n    rand = Math.floor(rand);\n    rand *= step;\n    rand += min;\n\n    return rand;\n}\n\nexport function normalDistRandomInt(min, max) {\n    let normal = Math.abs((Prob.normal(0, 1)() + 3) / 6),\n        result = Math.floor((normal * (max - min)) + min);\n\n    if (result < min) result = min;\n    if (result > max) result = max;\n\n    return result;\n}\n\nexport function minStrLength(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function maxStrLength(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.length; }));\n}\n\nexport function minWordCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function maxWordCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(' ').length; }));\n}\n\nexport function minSentenceCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function maxSentenceCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.split(/[\\.\\!\\?]+/).length; }));\n}\n\nexport function minParagraphCount(strArray) {\n    return Math.min.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function maxParagraphCount(strArray) {\n    return Math.max.apply(Math, strArray.map(function (str) { return str.replace(/\\n$/gm, '').split(/\\n/).length; }));\n}\n\nexport function minDate(dateArray) {\n    return new Date(Math.min.apply(null, dateArray));\n}\n\nexport function maxDate(dateArray) {\n    return new Date(Math.max.apply(null, dateArray));\n}\n\nexport function convertStringDateArray(stringDateArray) {\n    let newArray = [],\n        dateString;\n\n    for (dateString of stringDateArray) {\n        newArray.push(new Date(dateString));\n    }\n\n    return newArray;\n}\n\nexport function capitalize(str) {\n    return str.replace(/(?:^|\\s)\\S/g, function (a) { return a.toUpperCase(); });\n};\n\nexport function isDateString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(str);\n}\n\nexport function isDatetimeString(str) {\n    return /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function isTimeString(str) {\n    return /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(str);\n}\n\nexport function getWeights(allEntries, uniqueEntries) {\n    let weightedEntries = {},\n        weights = [],\n        entry;\n    \n    for (entry of allEntries) {\n        if (typeof weightedEntries[entry] === 'undefined') {\n            weightedEntries[entry] = 1;\n        } else {\n            weightedEntries[entry]++;\n        }\n    }\n\n    for (entry of uniqueEntries) {\n        weights.push(weightedEntries[entry]);\n    }\n\n    return weights;\n}\n\nexport function getNumberDirection(entries) {\n    let direction = null,\n        lastValue = null,\n        noDirection = false,\n        value;\n\n    for (value of entries) {\n        if (lastValue !== null && value > lastValue) {\n            if (direction === 'desc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'asc';\n        }\n        if (lastValue !== null && value < lastValue) {\n            if (direction === 'asc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'desc';\n        }\n        lastValue = value;\n    }\n\n    if (noDirection || direction === null) {\n        return false;\n    } else {\n        return direction;\n    }\n}\n\nexport function getDateDirection(entries) {\n    let direction = null,\n        lastValue = null,\n        noDirection = false,\n        value;\n\n    for (value of entries) {\n        let dateValue = new Date(value);\n\n        if (lastValue !== null && dateValue > lastValue) {\n            if (direction === 'desc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'asc';\n        }\n        if (lastValue !== null && dateValue < lastValue) {\n            if (direction === 'asc') {\n                noDirection = true;\n                break;\n            }\n            direction = 'desc';\n        }\n        lastValue = dateValue;\n    }\n\n    if (noDirection || direction === null) {\n        return false;\n    } else {\n        return direction;\n    }\n}\n\nexport function filterValue(value, filter) {\n    if (value.constructor !== Array) {\n        value = String(value);\n        let numValue = Number(value);\n\n        if (filter === 'slug') {\n            return slugify(value, { lower: true });\n        } else if (filter === 'lower') {\n            return value.toLowerCase();\n        } else if (filter === 'uppper') {\n            return value.toLowerCase();\n        } else if (filter === 'md5') {\n            return md5(value);\n        } else if (filter === 'capitalize') {\n            return capitalize(value);\n        } else if (filter === 'trim') {\n            return value.replace(/\\s/g, '');\n        } else if (filter === 'md') {\n            return marked(value);\n        } else if (numValue !== NaN && filter === 'round') {\n            return Math.round(value);\n        } else if (numValue !== NaN && filter === 'floor') {\n            return Math.floor(value);\n        } else if (numValue !== NaN && filter.substring(0, 4) === 'num:') {\n            let filterSplit = filter.split(':');\n            return numeral(numValue).format(filterSplit[1]);\n        } else if (filter === 'optional' && Math.random() >= 0.5) {\n            return '';\n        } else if (filter.substring(0, 5) === 'date:') {\n            let filterSplit = filter.split(':');\n            return format(new Date(value), filterSplit[1]);\n        } else {\n            return value;\n        }\n    } else {\n        if (filter === 'count') {\n            return value.length;\n        } else if (filter === 'max') {\n            return maxNumber(value);\n        } else if (filter === 'min') {\n            return minNumber(value);\n        } else if (filter === 'sum') {\n            return _.sum(value);\n        } else if (filter === 'avg') {\n            return _.mean(value);\n        } else {\n            return value;\n        }\n    }\n}\n\nexport function applyFilters(value, filters) {\n    let filtered = filterValue(value, filters[1]),\n        nr = 2;\n\n    while (filters.length > nr) {\n        filtered = filterValue(filtered, filters[nr]);\n        nr++;\n    }\n\n    return filtered;\n}\n\nexport function getValuesByPath(path, reftype, id, data) {\n    let type = path[0];\n\n    if (typeof data[type] !== 'undefined') {\n        let row, values = [];\n\n        for (row of data[type]) {\n            if (row[`${reftype}_id`] === id) {\n                if (path.length > 1) {\n                    values.push(row[path[1]]);\n                } else {\n                    values.push(row.id);\n                }\n            }\n        }\n\n        // Just return the ids\n        return values;\n    } else {\n        return [];\n    }\n}\n\nexport function getFieldByPath(row, path, data) {\n    let found = false,\n        nextSteps = path.slice(0),\n        currentRow = row;\n\n    if (path.length === 0) {\n        return null;\n    }\n\n    while (!found) {\n        let nextStep = nextSteps.shift();\n\n        if (typeof currentRow[nextStep + '_id'] !== 'undefined') {\n            let item,\n                pluralNextStep = pluralize(nextStep);\n\n            if (typeof data[pluralNextStep] !== 'undefined') {\n                for (item in data[pluralNextStep]) {\n                    if (data[pluralNextStep][item]['id'] === currentRow[nextStep + '_id']) {\n                        currentRow = data[pluralNextStep][item];\n                    }\n                }\n            }\n        } else if (typeof currentRow[nextStep] !== 'undefined') {\n            if (typeof currentRow[nextStep][path[path.length - 1]] !== 'undefined') {\n                return currentRow[nextStep][path[path.length - 1]];\n            } else {\n                if (typeof currentRow[nextStep] !== 'object') {\n                    return currentRow[nextStep];\n                } else {\n                    return null;\n                }\n            }\n        } else {\n            return null;\n        }\n\n        if (nextSteps.length === 0) {\n            found = true;\n        }\n    }\n\n    return null;\n}\n\nexport function detectFieldType(fieldValue) {\n    let fieldType = 'undefined',\n        containsTemplate = false;\n\n    if (typeof fieldValue === 'boolean') {\n        fieldType = 'boolean';\n    } else if (typeof fieldValue === 'number') {\n        if (Math.round(fieldValue) === fieldValue) {\n            fieldType = 'int';\n        } else {\n            fieldType = 'float';\n        }\n    } else if (typeof fieldValue === 'string') {\n        if (isDateString(fieldValue)) {\n            fieldType = 'date';\n        } else if (isDatetimeString(fieldValue)) {\n            fieldType = 'datetime';\n        } else if (isTimeString(fieldValue)) {\n            fieldType = 'time';\n        } else if (fieldValue.length === 1) {\n            fieldType = 'char';\n        } else {\n            if (/{{\\s*([\\w\\.\\?\\|\\:]+)\\s*}}/.test(fieldValue)) {\n                containsTemplate = true;\n            }\n            fieldType = 'string';\n        }\n    } else if (typeof fieldValue === 'object') {\n        if (Array.isArray(fieldValue)) {\n            fieldType = 'array';\n        } else {\n            fieldType = 'JSON';\n        }\n    }\n\n    return {\n        fieldType: fieldType,\n        containsTemplate: containsTemplate\n    }\n}\n\nexport function renameProperty(obj, oldName, newName) {\n    if (oldName == newName) {\n        return obj;\n    }\n\n    if (obj.hasOwnProperty(oldName)) {\n        obj[newName] = obj[oldName];\n        delete obj[oldName];\n    }\n\n    return obj;\n}\n\nexport function getFieldRules(key, value, type, prevFields) {\n    let rules = [];\n\n    for (prevField of prevFields) {\n        if ((type === 'int' || type === 'float') && (prevField.type === 'int' || prevField.type === 'float')) {\n            if (value > prevField.value) {\n                rules.push(`${key}>${prevField.key}`);\n            } else if (value < prevField.value) {\n                rules.push(`${key}<${prevField.key}`);\n            } else {\n                rules.push(`${key}=${prevField.key}`);\n            }\n        } else if ((type === 'date' && prevField.type === 'date') || (type === 'datetime' && prevField.type === 'datetime')) {\n            let valueDate = new Date(value),\n                prevValueDate = new Date(prevField.value);\n\n            if (valueDate > prevValueDate) {\n                rules.push(`${key}>${prevField.key}`);\n            } else if (valueDate < prevValueDate) {\n                rules.push(`${key}<${prevField.key}`);\n            } else {\n                rules.push(`${key}=${prevField.key}`);\n            }\n        }\n    }\n\n    return rules;\n}\n\nexport function removeIncompatibleRules(rules) {\n    let filteredRules = [],\n        rule;\n\n    for (rule of rules) {\n        let ruleSplit = rule.split(/>|<|=/);\n        \n        if (rule.indexOf('<') > -1 && rules.indexOf(`${ruleSplit[0]}>${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}=${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n        if (rule.indexOf('>') > -1 && rules.indexOf(`${ruleSplit[0]}<${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}=${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n        if (rule.indexOf('=') > -1 && rules.indexOf(`${ruleSplit[0]}>${ruleSplit[1]}`) === -1 && rules.indexOf(`${ruleSplit[0]}<${ruleSplit[1]}`) === -1) {\n            filteredRules.push(rule);\n        }\n    }\n\n    return filteredRules;\n}\n\nexport function rulesAreValid(value, rules, row, type) {\n    if (rules.length === 0) return true;\n    if (value === '') return false;\n\n    let rule;\n\n    for (rule of rules) {\n        let ruleSplit = rule.split(/>|<|=/);\n\n        if (typeof row[ruleSplit[1]] !== 'undefined' && row[ruleSplit[1]] !== '') {\n            if (type === 'int' || type === 'float') {\n                if (rule.indexOf('<') > -1 && value >= row[ruleSplit[1]]) {\n                    return false;\n                }\n                if (rule.indexOf('>') > -1 && value <= row[ruleSplit[1]]) {\n                    return false;\n                }\n                if (rule.indexOf('=') > -1 && value !== row[ruleSplit[1]]) {\n                    return false;\n                }\n            } else if (type === 'date' || type === 'datetime') {\n                let valueDate = new Date(value),\n                    rowValueDate = new Date(row[ruleSplit[1]]);\n\n                if (rule.indexOf('<') > -1 && valueDate >= rowValueDate) {\n                    return false;\n                }\n                if (rule.indexOf('>') > -1 && valueDate <= rowValueDate) {\n                    return false;\n                }\n                if (rule.indexOf('=') > -1 && valueDate !== rowValueDate) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function ruleBasedValue(rules, row, key) {\n    let field;\n\n    for (field in row) {\n        if (rules.indexOf(`${key}=${field}`) > -1) {\n            return row[field];\n        }\n    }\n\n    return null;\n}\n\nexport function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}","import _ from 'lodash';\nimport Chance from 'chance';\nimport faker from 'faker';\nimport stringify from 'json-stringify-pretty-compact';\nimport pluralize from 'pluralize';\n\nimport {\n    sentence,\n    paragraph,\n    article,\n    addTemplates,\n    generator\n} from './txtgen/main'; // Extended version of the Txtgen library. Original at: https://github.com/ndaidong/txtgen\n\nimport {\n    randomTime,\n    randomDate,\n    randomDatetime,\n    findGap,\n    getMaxPrecision,\n    everythingCapitalized,\n    minNumber,\n    maxNumber,\n    minGapOfIntArray,\n    randomIntWithStep,\n    minStrLength,\n    maxStrLength,\n    minWordCount,\n    maxWordCount,\n    minSentenceCount,\n    maxSentenceCount,\n    minParagraphCount,\n    maxParagraphCount,\n    minDate,\n    maxDate,\n    convertStringDateArray,\n    capitalize,\n    isDateString,\n    isDatetimeString,\n    isTimeString,\n    getWeights,\n    getNumberDirection,\n    getDateDirection,\n    filterValue,\n    applyFilters,\n    getFieldByPath,\n    getValuesByPath,\n    detectFieldType,\n    normalDistRandomInt,\n    renameProperty,\n    getFieldRules,\n    removeIncompatibleRules,\n    rulesAreValid,\n    ruleBasedValue,\n    isNumeric\n} from './helpers';\n\nconst chance = new Chance();\n\naddTemplates([\n    'congratulations to the {{noun}} that won the {{adjective}} {{noun}} with {{a_noun}}',\n    'incomprehensibilities of a {{adjective}} {{noun}} and {{a_noun}} made {{a_noun}} {{adjective}}'\n]);\n\nmodule.exports = function blowson(inputData) {\n    let dataIsJSON = false,\n        data = {},\n        types = [],\n        type,\n        row,\n        field,\n        entry,\n        customKeyNames = {},\n        tempKeys = [];\n\n    if (typeof data === 'string') {\n        data = JSON.parse(inputData);\n        dataIsJSON = true;\n    } else {\n        data = inputData;\n    }\n\n    for (type in data) {\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                let fieldSplit = field.split('__');\n\n                if (field.substr(0, 2) === '__') {\n                    tempKeys.push(`${type}.${field.substr(2)}`);\n                    renameProperty(data[type][entry], field, field.substr(2));\n                    continue;\n                }\n\n                if (fieldSplit.length > 1) {\n                    customKeyNames[`${type}.${fieldSplit[1]}`] = `${type}.${fieldSplit[0]}`;\n                    renameProperty(data[type][entry], field, fieldSplit[1]);\n                }\n            }\n        }\n    }\n\n    for (type in data) {\n        let typeDef = {\n                key: type,\n                minID: 1,\n                maxID: 1,\n                totalCount: 0,\n                fields: {}\n            };\n\n        for (entry in data[type]) {\n            let prevFields = [];\n\n            for (field in data[type][entry]) {\n                let fieldValue = data[type][entry][field],\n                    { fieldType, containsTemplate } = detectFieldType(fieldValue);\n\n                if (typeof typeDef.fields[field] === 'undefined') {\n                    typeDef.fields[field] = {\n                        types: [fieldType],\n                        entries: [fieldValue],\n                        allEntries: [fieldValue],\n                        containsTemplate: containsTemplate,\n                        rules: [],\n                        cnt: 1\n                    };\n                } else {\n                    typeDef.fields[field].types.push(fieldType);\n                    typeDef.fields[field].types = _.uniq(typeDef.fields[field].types);\n                    typeDef.fields[field].entries.push(fieldValue);\n                    typeDef.fields[field].entries = _.uniq(typeDef.fields[field].entries);\n                    typeDef.fields[field].allEntries.push(fieldValue);\n                    typeDef.fields[field].cnt++;\n                    if (containsTemplate) {\n                        typeDef.fields[field].containsTemplate = true;\n                    }\n                }\n\n                if (fieldType === 'JSON') {\n                    let objField;\n\n                    for (objField in fieldValue) {\n                        let objFieldValue = fieldValue[objField],\n                            result = detectFieldType(objFieldValue),\n                            objFieldType = result.fieldType,\n                            objContainsTemplate = result.containsTemplate;\n\n                        if (typeof typeDef.fields[field + '.' + objField] === 'undefined') {\n                            typeDef.fields[field + '.' + objField] = {\n                                types: [objFieldType],\n                                entries: [objFieldValue],\n                                allEntries: [objFieldValue],\n                                containsTemplate: objContainsTemplate,\n                                cnt: 1\n                            };\n                        } else {\n                            typeDef.fields[field + '.' + objField].types.push(objFieldType);\n                            typeDef.fields[field + '.' + objField].types = _.uniq(typeDef.fields[field + '.' + objField].types);\n                            typeDef.fields[field + '.' + objField].entries.push(objFieldValue);\n                            typeDef.fields[field + '.' + objField].entries = _.uniq(typeDef.fields[field + '.' + objField].entries);\n                            typeDef.fields[field + '.' + objField].allEntries.push(objFieldValue);\n                            typeDef.fields[field + '.' + objField].cnt++;\n                            if (objContainsTemplate) {\n                                typeDef.fields[field + '.' + objField].objContainsTemplate = true;\n                            }\n                        }\n                    }\n                }\n\n                if (prevFields.length > 0 && field !== 'id' && !field.endsWith('_id') && !field.endsWith('_ids')) {\n                    let rules = getFieldRules(field, fieldValue, fieldType, prevFields);\n                    \n                    if (rules.length > 0) {\n                        typeDef.fields[field].rules = typeDef.fields[field].rules.concat(rules);\n                    }\n                }\n\n                if (field !== 'id' && !field.endsWith('_id') && !field.endsWith('_ids')) {\n                    prevFields.push({\n                        key: field,\n                        value: fieldValue,\n                        type: fieldType\n                    });\n                }\n            }\n        }\n\n        for (field in typeDef.fields) {\n            if (field === 'id') {\n                typeDef.totalCount = typeDef.fields[field].cnt;\n            }\n\n            if (typeDef.fields[field].types.length === 1) {\n                typeDef.fields[field].type = typeDef.fields[field].types[0];\n            } else {\n                if (typeDef.fields[field].types.length == 2 && typeDef.fields[field].types.indexOf('int') > -1 && typeDef.fields[field].types.indexOf('float') > -1) {\n                    typeDef.fields[field].type = 'float';\n                } else {\n                    typeDef.fields[field].type = 'string';\n                }\n            }\n\n            if (typeDef.fields[field].entries.length < typeDef.fields[field].cnt || typeDef.fields[field].containsTemplate) {\n                typeDef.fields[field].repeatEntries = true;\n                typeDef.fields[field].weights = getWeights(typeDef.fields[field].allEntries, typeDef.fields[field].entries);\n            } else {\n                typeDef.fields[field].repeatEntries = false;\n            }\n\n            if (typeDef.fields[field].cnt < typeDef.totalCount) {\n                typeDef.fields[field].required = false;\n            } else {\n                typeDef.fields[field].required = true;\n            }\n\n            typeDef.fields[field].rules = removeIncompatibleRules(_.uniq(typeDef.fields[field].rules));\n            \n            typeDef.fields[field].dir = false;\n\n            if (typeDef.fields[field].type === 'int' || typeDef.fields[field].type === 'float') {\n                typeDef.fields[field].dir = getNumberDirection(typeDef.fields[field].entries);\n            }\n            if (typeDef.fields[field].type === 'date' || typeDef.fields[field].type === 'datetime') {\n                typeDef.fields[field].dir = getDateDirection(typeDef.fields[field].entries);\n            }\n        }\n\n        typeDef.gap = findGap(typeDef.fields['id'].entries);\n\n        types.push(typeDef);\n    }\n\n    for (type in types) {\n        let settings = types[type];\n\n        if (settings.gap) {\n            let id,\n                field;\n\n            for (id = settings.gap.start; id <= settings.gap.end; id++) {\n                let row = {};\n\n                for (field in settings.fields) {\n                    let value = '';\n\n                    if (settings.fields[field].repeatEntries || settings.fields[field].containsTemplate) {\n                        value = chance.weighted(settings.fields[field].entries, settings.fields[field].weights);\n                    } else {\n\n                        if (field === 'id') value = id;\n                        if ((field === 'age' || field.endsWith('.age')) && settings.fields[field].type === 'int') value = chance.age();\n                        if ((field === 'firstname' || field.endsWith('.firstname')) && settings.fields[field].type === 'string') value = chance.first();\n                        if ((field === 'lastname' || field.endsWith('.lastname')) && settings.fields[field].type === 'string') value = chance.last();\n                        if ((field === 'company' || field.endsWith('.company')) && settings.fields[field].type === 'string') value = chance.company();\n                        if ((field === 'country' || field.endsWith('.country')) && settings.fields[field].type === 'string') value = chance.country();\n                        if ((field === 'email' || field.endsWith('.email')) && settings.fields[field].type === 'string') value = faker.internet.exampleEmail();\n                        if ((field === 'color' || field.endsWith('.color')) && settings.fields[field].type === 'string') value = chance.color();\n                        if ((field === 'ip' || field.endsWith('.ip')) && settings.fields[field].type === 'string') value = chance.ip();\n                        if ((field === 'profession' || field.endsWith('.profession')) && settings.fields[field].type === 'string') value = chance.profession();\n                        if ((field === 'url' || field.endsWith('.url')) && settings.fields[field].type === 'string') value = chance.url();\n                        if ((field === 'city' || field.endsWith('.city')) && settings.fields[field].type === 'string') value = chance.city();\n                        if ((field === 'street' || field.endsWith('.street')) && settings.fields[field].type === 'string') value = chance.street();\n                        if ((field === 'zip' || field.endsWith('.zip')) && settings.fields[field].type === 'int') value = parseInt(chance.zip());\n                        if ((field === 'weekday' || field.endsWith('.weekday')) && settings.fields[field].type === 'string') value = chance.weekday();\n                        if ((field === 'year' || field.endsWith('.year')) && settings.fields[field].type === 'int') value = parseInt(chance.year());\n                        if ((field === 'password' || field.endsWith('.password')) && settings.fields[field].type === 'string') value = chance.hash();\n                        if ((field === 'guid' || field.endsWith('.guid')) && settings.fields[field].type === 'string') value = chance.guid();\n                        if ((field === 'product' || field.endsWith('.product')) && settings.fields[field].type === 'string') value = faker.commerce.productName();\n                        if ((field === 'material' || field.endsWith('.material')) && settings.fields[field].type === 'string') value = faker.commerce.productMaterial();\n                        if ((field === 'iban' || field.endsWith('.iban')) && settings.fields[field].type === 'string') value = faker.finance.iban();\n                        if ((field === 'bic' || field.endsWith('.bic')) && settings.fields[field].type === 'string') value = faker.finance.bic();\n                        if ((field === 'avatar' || field.endsWith('.avatar')) && settings.fields[field].type === 'string') value = faker.image.avatar();\n                        if ((field === 'username' || field.endsWith('.username')) && settings.fields[field].type === 'string') value = faker.internet.userName();\n                        if ((field === 'homepage' || field.endsWith('.homepage')) && settings.fields[field].type === 'string') value = faker.internet.url();\n                        if ((field === 'job' || field.endsWith('.job')) && settings.fields[field].type === 'string') value = faker.name.jobTitle();\n                        if ((field === 'mimetype' || field.endsWith('.mimetype')) && settings.fields[field].type === 'string') value = faker.system.mimeType();\n\n                        if (value === '' && settings.fields[field].type === 'JSON') {\n                            value = {};\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'array') {\n                            let min = null, \n                                max = null, \n                                maxCount = 0;\n\n                            for (arrEntry of settings.fields[field].entries) {\n                                let arrMin = minNumber(arrEntry),\n                                    arrMax = maxNumber(arrEntry),\n                                    arrCount = arrEntry.length;\n                                \n                                if (arrCount > 0 && (min === null || arrMin < min)) {\n                                    min = arrMin;\n                                }\n                                if (arrCount > 0 && (max === null || arrMax > max)) {\n                                    max = arrMax;\n                                }\n                                if (arrCount > maxCount) {\n                                    maxCount = arrCount;\n                                }\n                            }\n\n                            value = Array.from({ length: Math.floor(Math.random() * maxCount) + 1 }, () => randomIntWithStep(min, max, 1));\n                            value.sort(function (a, b) {\n                                return a - b;\n                            });\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'string') {\n                            let minLength = minStrLength(settings.fields[field].entries),\n                                maxLength = maxStrLength(settings.fields[field].entries),\n                                minWords = minWordCount(settings.fields[field].entries),\n                                maxWords = maxWordCount(settings.fields[field].entries),\n                                minSentences = minSentenceCount(settings.fields[field].entries),\n                                maxSentences = maxSentenceCount(settings.fields[field].entries),\n                                minParagraphs = minParagraphCount(settings.fields[field].entries),\n                                maxParagraphs = maxParagraphCount(settings.fields[field].entries);\n\n                            if (maxParagraphs > 1) {\n                                value = article(Math.floor(Math.random() * maxParagraphs) + minParagraphs);\n                            } else if (maxSentences > 1) {\n                                value = paragraph(Math.floor(Math.random() * maxSentences) + minSentences);\n                            } else if (maxWords > 1) {\n                                value = chance.sentence({ words: Math.floor(Math.random() * maxWords) + minWords }).slice(0, -1);\n                            } else {\n                                if (settings.fields[field].entries[0][0].toUpperCase() === settings.fields[field].entries[0][0]) {\n                                    value = chance.capitalize(chance.word({ length: Math.floor(Math.random() * minLength) + maxLength }));\n                                } else {\n                                    value = chance.string({ length: Math.floor(Math.random() * minLength) + maxLength });\n                                }\n                            }\n\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = value.toUpperCase();\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = value.toLowerCase();\n                            } else if (everythingCapitalized(settings.fields[field].entries)) {\n                                value = capitalize(value);\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'int') {\n                            let minInt = minNumber(settings.fields[field].entries),\n                                maxInt = maxNumber(settings.fields[field].entries),\n                                minGap = minGapOfIntArray(settings.fields[field].entries),\n                                cnt = 0,\n                                ruleValue = ruleBasedValue(settings.fields[field].rules, row, field),\n                                dirSteps = settings.gap.end - settings.gap.start + 1,\n                                averageStepGap = (maxInt - minInt) / dirSteps;\n\n                            if (settings.fields[field].dir === 'asc') {\n                                maxInt = Math.ceil(minInt + ((id - settings.gap.start + 1) * averageStepGap) - 1);\n                                minInt = Math.floor(minInt + ((id - settings.gap.start) * averageStepGap) + 1);\n                            } else if (settings.fields[field].dir === 'desc') {\n                                minInt = Math.ceil(maxInt - ((id - settings.gap.start + 1) * averageStepGap) + 1);\n                                maxInt = Math.floor(maxInt - ((id - settings.gap.start) * averageStepGap) - 1);\n                            }\n                            \n                            if (field.endsWith('_id')) {\n                                value = normalDistRandomInt(minInt, maxInt);\n                            } else {\n                                if (ruleValue === null) {\n                                    while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                        value = randomIntWithStep(minInt, maxInt, minGap);\n                                        cnt++;\n                                    }\n                                } else {\n                                    value = ruleValue;\n                                }\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'float') {\n                            let minFloat = minNumber(settings.fields[field].entries),\n                                maxFloat = maxNumber(settings.fields[field].entries),\n                                maxPrecision = getMaxPrecision(settings.fields[field].entries),\n                                cnt = 0,\n                                ruleValue = ruleBasedValue(settings.fields[field].rules, row, field),\n                                dirSteps = settings.gap.end - settings.gap.start + 1,\n                                averageStepGap = (maxFloat - minFloat - 1) / dirSteps;\n\n                            if (settings.fields[field].dir === 'asc') {\n                                maxFloat = minFloat + ((id - settings.gap.start + 1) * averageStepGap) + 1;\n                                minFloat = minFloat + ((id - settings.gap.start) * averageStepGap) + 1;\n                            } else if (settings.fields[field].dir === 'desc') {\n                                minFloat = maxFloat - ((id - settings.gap.start + 1) * averageStepGap) - 1;\n                                maxFloat = maxFloat - ((id - settings.gap.start) * averageStepGap) - 1;\n                            }\n\n                            if (ruleValue === null) {\n                                while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                    value = Number(chance.floating({ min: minFloat, max: maxFloat }).toFixed(maxPrecision));\n                                    cnt++;\n                                }\n                            } else {\n                                value = ruleValue;\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'char') {\n                            if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toUpperCase()) {\n                                value = chance.letter({ casing: 'upper' });\n                            } else if (settings.fields[field].entries[0] === settings.fields[field].entries[0].toLowerCase()) {\n                                value = chance.letter({ casing: 'lower' });\n                            } else {\n                                value = chance.letter();\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'date') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries)),\n                                cnt = 0,\n                                ruleValue = ruleBasedValue(settings.fields[field].rules, row, field),\n                                dirSteps = settings.gap.end - settings.gap.start + 1,\n                                averageStepGap = (maxDateDate.getTime() - minDateDate.getTime() - 1) / dirSteps;\n\n                            if (settings.fields[field].dir === 'asc') {\n                                maxDateDate = new Date(minDateDate.getTime() + ((id - settings.gap.start + 1) * averageStepGap) + 1);\n                                minDateDate = new Date(minDateDate.getTime() + ((id - settings.gap.start) * averageStepGap) + 1);\n                            } else if (settings.fields[field].dir === 'desc') {\n                                minDateDate = new Date(maxDateDate.getTime() - ((id - settings.gap.start + 1) * averageStepGap) - 1);\n                                maxDateDate = new Date(maxDateDate.getTime() - ((id - settings.gap.start) * averageStepGap) - 1);\n                            }\n\n                            if (ruleValue === null) {\n                                while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                    value = randomDate(minDateDate, maxDateDate);\n                                    cnt++;\n                                }\n                            } else {\n                                value = ruleValue;\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'datetime') {\n                            let minDateDate = minDate(convertStringDateArray(settings.fields[field].entries)),\n                                maxDateDate = maxDate(convertStringDateArray(settings.fields[field].entries)),\n                                cnt = 0,\n                                ruleValue = ruleBasedValue(settings.fields[field].rules, row, field),\n                                dirSteps = settings.gap.end - settings.gap.start + 1,\n                                averageStepGap = (maxDateDate.getTime() - minDateDate.getTime() - 1) / dirSteps;\n\n                            if (settings.fields[field].dir === 'asc') {\n                                maxDateDate = new Date(minDateDate.getTime() + ((id - settings.gap.start + 1) * averageStepGap) + 1);\n                                minDateDate = new Date(minDateDate.getTime() + ((id - settings.gap.start) * averageStepGap) + 1);\n                            } else if (settings.fields[field].dir === 'desc') {\n                                minDateDate = new Date(maxDateDate.getTime() - ((id - settings.gap.start + 1) * averageStepGap) - 1);\n                                maxDateDate = new Date(maxDateDate.getTime() - ((id - settings.gap.start) * averageStepGap) - 1);\n                            }\n\n                            if (ruleValue === null) {\n                                while (cnt === 0 || (!rulesAreValid(value, settings.fields[field].rules, row, settings.fields[field].type) && cnt < 100)) {\n                                    value = randomDatetime(minDateDate, maxDateDate);\n                                    cnt++;\n                                }\n                            } else {\n                                value = ruleValue;\n                            }\n                        }\n\n                        if (value === '' && settings.fields[field].type === 'time') {\n                            value = randomTime();\n                        }\n\n                    }\n\n                    if (settings.fields[field].required || Math.random() >= 0.5) {\n                        if (field.indexOf('.') > -1) {\n                            let fieldSplit = field.split('.');\n\n                            if (typeof row[fieldSplit[0]] !== 'undefined') {\n                                row[fieldSplit[0]][fieldSplit[1]] = value;\n                            }\n                        } else {\n                            row[field] = value;\n                        }\n                    }\n                }\n\n                data[settings.key].push(row);\n            }\n\n        }\n\n    }\n\n    // Replace template variables:\n    for (type in data) {\n        for (row in data[type]) {\n            for (field in data[type][row]) {\n                let value = data[type][row][field],\n                    id = data[type][row].id;\n\n                if (typeof value === 'string') {\n                    data[type][row][field] = value.replace(/{{\\s*([\\w\\.\\?\\|\\:]+)\\s*}}/g, function (match, capture) {\n                        let defaultParts = capture.split('?'),\n                            filterParts = defaultParts[0].split('|'),\n                            parts = filterParts[0].split('.');\n\n                        if (parts[0] === 'number' && parts.length === 1) {\n                            return Math.floor(Math.random() * 10);\n                        } else if (parts[0] === 'sentence' && parts.length === 1) {\n                            return sentence();\n                        } else if (parts[0] === 'paragraph' && parts.length === 1) {\n                            return paragraph();\n                        } else if (parts[0] === 'word' && parts.length === 2) {\n                            if (typeof generator[parts[1]] !== 'undefined') {\n                                if (filterParts.length > 1) {\n                                    return applyFilters(generator[parts[1]](), filterParts);\n                                } else {\n                                    return generator[parts[1]]();\n                                }\n                            }\n                        } else if (parts[0] === 'field' && parts.length === 2 && typeof data[type][row][parts[1]] !== 'undefined') {\n                            if (filterParts.length > 1) {\n                                return applyFilters(data[type][row][parts[1]], filterParts);\n                            } else {\n                                return data[type][row][parts[1]];\n                            }\n                        } else if (parts[0] === 'field' && parts.length > 2) {\n                            let path = parts.slice(1),\n                                value = getFieldByPath(data[type][row], path, data);\n\n                            if (value !== null) {\n                                if (filterParts.length > 1) {\n                                    return applyFilters(value, filterParts);\n                                } else {\n                                    return value;\n                                }\n                            }\n\n                            if (defaultParts.length > 1) {\n                                return defaultParts[1];\n                            }\n                        } else if (parts[0] === 'connected' && parts.length > 1) {\n                            let path = parts.slice(1),\n                                values = getValuesByPath(path, pluralize.singular(type), id, data);\n\n                            if (values.length > 0) {\n                                if (filterParts.length > 1) {\n                                    return applyFilters(values, filterParts);\n                                } else {\n                                    return values.join(', ');\n                                }\n                            }\n                        } else if (defaultParts.length > 1) {\n                            return defaultParts[1];\n                        }\n\n                        return match;\n                    });\n\n                    data[type][row][field] = data[type][row][field].replace(/  +/g, ' ');\n                    if (isNumeric(data[type][row][field])) {\n                        data[type][row][field] = Number(data[type][row][field]);\n                    }\n                }\n            }\n        }\n    }\n\n    for (type in data) {\n        for (entry in data[type]) {\n            for (field in data[type][entry]) {\n                if (tempKeys.indexOf(`${type}.${field}`) > -1) {\n                    delete (data[type][entry][field]);\n                }\n                if (typeof customKeyNames[`${type}.${field}`] !== 'undefined') {\n                    renameProperty(data[type][entry], field, customKeyNames[`${type}.${field}`].split('.')[1]);\n                }\n            }\n        }\n    }\n\n    if (dataIsJSON) {\n        return stringify(data);\n    }\n\n    return data;\n}"],"names":["const","random","min","max","let","offset","range","Math","floor","rand","a","w","length","pluralize","word","endsWith","match","vowels","includes","charAt","slice","normalize","nouns","adjectives","sentenceTemplates","phrases","actions","generator","noun","a_noun","adjective","an_adjective","makeSentenceFromTemplate","template","sentence","occurrences","i","action","replace","result","make","s","toUpperCase","split","paragraph","len","t","push","join","article","chance","Chance","randomDatetime","start","end","d","Date","getTime","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","findGap","numArray","apply","missingNums","indexOf","floatPrecision","isFinite","e","p","round","getMaxPrecision","floatArray","maxPrecision","precision","everythingCapitalized","stringArray","str","isCapitalized","capitalize","minNumber","intArray","maxNumber","minGapOfIntArray","value1","value2","minGap","abs","randomIntWithStep","step","arguments","normalDistRandomInt","normal","Prob","maxStrLength","strArray","map","minWordCount","maxWordCount","minSentenceCount","maxSentenceCount","minParagraphCount","maxParagraphCount","minDate","dateArray","maxDate","convertStringDateArray","stringDateArray","newArray","getWeights","allEntries","uniqueEntries","entry","weightedEntries","weights","getNumberDirection","entries","value","direction","lastValue","noDirection","getDateDirection","dateValue","filterValue","filter","constructor","Array","String","numValue","Number","slugify","lower","toLowerCase","md5","marked","NaN","substring","filterSplit","numeral","format","_","sum","mean","applyFilters","filters","filtered","nr","getValuesByPath","path","reftype","id","data","type","row","values","getFieldByPath","found","nextSteps","currentRow","nextStep","shift","item","pluralNextStep","detectFieldType","fieldValue","fieldType","containsTemplate","test","isDatetimeString","isTimeString","isArray","renameProperty","obj","oldName","newName","hasOwnProperty","getFieldRules","key","prevFields","rules","prevField","valueDate","prevValueDate","removeIncompatibleRules","rule","filteredRules","ruleSplit","rulesAreValid","rowValueDate","ruleBasedValue","field","concat","r","unique","module","exports","inputData","dataIsJSON","types","customKeyNames","tempKeys","JSON","parse","fieldSplit","substr","typeDef","minID","maxID","totalCount","fields","cnt","uniq","objField","objFieldValue","objFieldType","objContainsTemplate","repeatEntries","required","dir","gap","settings","weighted","age","first","last","company","country","faker","internet","exampleEmail","color","ip","profession","url","city","street","parseInt","zip","weekday","hash","guid","commerce","productName","productMaterial","finance","iban","bic","image","avatar","userName","name","jobTitle","system","mimeType","maxCount","arrEntry","arrMin","arrMax","arrCount","from","sort","b","minLength","maxLength","minWords","maxWords","minSentences","maxSentences","minParagraphs","maxParagraphs","words","string","minInt","maxInt","ruleValue","averageStepGap","ceil","minFloat","maxFloat","floating","toFixed","letter","casing","minDateDate","maxDateDate","dirSteps","hour","twentyfour","minute","second","n","capture","defaultParts","filterParts","parts","singular","isNaN","parseFloat","stringify"],"mappings":"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"}